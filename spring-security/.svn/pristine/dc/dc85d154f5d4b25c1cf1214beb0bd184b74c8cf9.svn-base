package com.techstudio.model.am;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;


@Entity
@Table(name="am_account" )
public class AccountDTO implements Serializable, UserDetails{

	/**
	 * 
	 */
	private static final long serialVersionUID = -8030246304651997605L;

	@Id	
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "account_id", columnDefinition="bigint", unique = true, nullable=false)
	private Long accountId;
	
	@Column(name = "encrypted_password", columnDefinition="varchar(255)", nullable=false)
	private String encryptedPassword;
	
	@DateTimeFormat(pattern="dd-MM-yyyy HH:mm:ss")
	@Column(name = "password_last_updated", columnDefinition="datetime", nullable=false)
	private Date passwordLastUpdated;
	
	@Column(name = "first_name", columnDefinition="varchar(150)", nullable=true)
	private String firstName;
	
	@Column(name = "mid_name", columnDefinition="varchar(150)", nullable=true)
	private String midName;
	
	@Column(name = "last_name", columnDefinition="varchar(150)", nullable=true)
	private String lastName;
	
	@Column(name = "ou", columnDefinition="varchar(255)", nullable=false)
	private String ou;
	
	@Column(name = "contract_num", columnDefinition="varchar(30)", nullable=true)
	private String contractNum;
	
	@Column(name = "login_uid", columnDefinition="varchar(150)", nullable=true)
	private String loginUid;
	
	@Column(name = "status", columnDefinition="int default 1", nullable=false)
	private Integer status;
	
	@Column(name = "delete_flag", columnDefinition="int default 0", nullable=false)
	private Integer deleteFlag;
	
	@DateTimeFormat(pattern="dd-MM-yyyy HH:mm:ss")
	@Column(name = "created_date", columnDefinition="datetime")
	private Date createdDate;
	
	@DateTimeFormat(pattern="dd-MM-yyyy HH:mm:ss")
	@Column(name = "last_updated", columnDefinition="datetime")
	private Date lastUpdated;
	
	@Column(name = "remarks", columnDefinition="text", nullable=true)
	private String remarks;
	
//	@Transient
//	private String ;

/* Constructor (You can create an constructor for default value setting) */
	
	public AccountDTO(){
		
	}

	
/* Relationship */
	
	@JsonIgnore
	@ManyToOne
    @JoinColumn(name="role_id")
    private RoleDTO roleDTO;
	
	@JsonIgnore
	@ManyToOne
    @JoinColumn(name="organization_id")
    private OrganizationDTO organizationDTO; 
	
/* toString() Function */
	@Override
	public String toString() {
		return "AccountDTO [account_id = " + accountId + ", first_name = " + firstName +
				", mid_name = " + midName + ", last_name = " + lastName + ", ou = " + ou
				+ ", contract_num = " + contractNum + ", login_uid = "
				+ loginUid + ", status = " + status + ", created_date = " + createdDate.toString() + 
				", last_updated = " + lastUpdated.toString() + ", remarks = " + remarks + 
				", role_id = " + (roleDTO!=null ? this.roleDTO.getRoleId() : null) + "]";
	}
	
/* Getter and Setter */
	

	public Long getAccountId() {
		return accountId;
	}


	public void setAccountId(Long accountId) {
		this.accountId = accountId;
	}


	public String getEncryptedPassword() {
		return encryptedPassword;
	}


	public void setEncryptedPassword(String encryptedPassword) {
		this.encryptedPassword = encryptedPassword;
	}


	public Date getPasswordLastUpdated() {
		return passwordLastUpdated;
	}


	public void setPasswordLastUpdated(Date passwordLastUpdated) {
		this.passwordLastUpdated = passwordLastUpdated;
	}


	public String getFirstName() {
		return firstName;
	}


	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}


	public String getMidName() {
		return midName;
	}


	public void setMidName(String midName) {
		this.midName = midName;
	}


	public String getLastName() {
		return lastName;
	}


	public void setLastName(String lastName) {
		this.lastName = lastName;
	}


	public String getOu() {
		return ou;
	}


	public void setOu(String ou) {
		this.ou = ou;
	}


	public String getContractNum() {
		return contractNum;
	}


	public void setContractNum(String contractNum) {
		this.contractNum = contractNum;
	}
	
	
	public String getLoginUid() {
		return loginUid;
	}

	
	public void setLoginUid(String loginUid) {
		this.loginUid = loginUid;
	}

	
	public Integer getStatus() {
		return status;
	}


	public void setStatus(Integer status) {
		this.status = status;
	}


	public Integer getDeleteFlag() {
		return deleteFlag;
	}


	public void setDeleteFlag(Integer deleteFlag) {
		this.deleteFlag = deleteFlag;
	}


	public Date getCreatedDate() {
		return createdDate;
	}


	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}


	public Date getLastUpdated() {
		return lastUpdated;
	}


	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}


	public String getRemarks() {
		return remarks;
	}


	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}


	public RoleDTO getRoleDTO() {
		return roleDTO;
	}
	

	public void setRoleDTO(RoleDTO roleDTO) {
		this.roleDTO = roleDTO;
	}
	

	public OrganizationDTO getOrganizationDTO() {
		return organizationDTO;
	}


	public void setOrganizationDTO(OrganizationDTO organizationDTO) {
		this.organizationDTO = organizationDTO;
	}


	public boolean isAccountSuspended() {
		if(this.status==0) {
			return true;
		}else {
			return false;
		}
	}
	
	@JsonIgnore
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Collection<GrantedAuthority> grantedAuthorities = new ArrayList<>();
		if(this.loginUid.equals("techunited")) {
			GrantedAuthority grantedAuthority = new SimpleGrantedAuthority("ROLE_WS_ROOT_ADMIN");
            grantedAuthorities.add(grantedAuthority);
		}else {
			for(RoleFunctionDTO roleFunction : this.roleDTO.getRoleFunctionList()) {
				GrantedAuthority grantedAuthority = new SimpleGrantedAuthority("ROLE_"+roleFunction.getFunctionDTO().getFunctionName());
	            grantedAuthorities.add(grantedAuthority);
			}
		}
		return grantedAuthorities;
	}

	
	@Override
	public String getPassword() {
		return this.encryptedPassword;
	}

	
	@Override
	public String getUsername() {
		return this.loginUid;
	}

	
	@Override
	public boolean isAccountNonExpired() {
		return true;
	}
	

	@Override
	public boolean isAccountNonLocked() {
		if(this.status==1) {
			return true;
		}else {
			return false;
		}
	}
	

	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}
	

	@Override
	public boolean isEnabled() {
		return true;
	}
}
