package com.techstudio.service.am;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.techstudio.common.AjaxListResponse;
import com.techstudio.dao.am.AccountDao;
import com.techstudio.dao.am.OrganizationAliasDao;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.dao.am.OrganizationRoleDao;
import com.techstudio.dao.am.RoleDao;
import com.techstudio.dao.am.RoleFunctionDao;
import com.techstudio.model.am.AccountDTO;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.OrganizationRoleDTO;
import com.techstudio.model.am.RoleDTO;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.util.LongWrapUtils;

@Service
public class RoleServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(RoleServiceImpl.class);
	
	private static final String ROLE_COLUMN_0 = "roleDTO_RoleId";
	private static final String ROLE_COLUMN_1 = "roleDTO_RoleName";
	private static final String ROLE_COLUMN_2 = "organizationDTO_Ou";
	private static final String ROLE_COLUMN_3 = "organizationDTO_UserType";
	
	@Value("${max.predefine.role.id}")
	private String MAX_PREDEFINED_ROLE_ID;
	
	@Value("${ROOT_ADMIN}")
	private String ROOT_ADMIN;
	
	@Autowired  
	private MessageSource messageSource;
	
	@Autowired
	private OrganizationDao organizationDao;
	
	@Autowired
	private OrganizationRoleDao organizationRoleDao;
	
	@Autowired
	private OrganizationAliasDao organizationAliasDao;
	
	@Autowired
	private RoleFunctionDao roleFunctionDao;
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private AccountDao accountDao;
	
	
	@Transactional
	public RoleDTO getRoleByRoleId(Long id) {
		RoleDTO roleDTO = roleDao.findOne(id);
		return roleDTO;
	}
	
	@Transactional
	public List<Map<String, Object>> getReloadRoleList(String ouBelongsTo) {
		
		log.debug("RoleServiceImpl | getReloadRoleList | entry");
		OrganizationDTO organizationDTO = organizationDao.findByOu(ouBelongsTo).get(0);
		List<OrganizationRoleDTO> organizationRoleList = organizationRoleDao.findByOrganizationDTO(organizationDTO);
		
		List<Map<String, Object>> resultList = new LinkedList<Map<String, Object>>();
		
		for (OrganizationRoleDTO o : organizationRoleList) {
			
			addRoleOptionsToJSON(o.getRoleDTO(), resultList);
			
		}
		
		log.debug("RoleServiceImpl | getReloadRoleList | exit");
		return resultList;
	}

	private void addRoleOptionsToJSON(RoleDTO roleDTO,
			List<Map<String, Object>> resultList) {
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("id", roleDTO.getRoleId().toString());
		map.put("name", roleDTO.getName());
		resultList.add(map);
		
	}
	
	@Transactional
	public String getRoleNameByRoleId(Long roleId) throws Exception {
		
		log.debug("RoleServiceImpl | getRoleNameByRoleId | entry");
		String roleName  = null;
		if(roleId!=null) {
			RoleDTO roleDTO = roleDao.findByRoleId(roleId);
			roleName  = roleDTO.getName();
		}
		log.debug("RoleServiceImpl | getRoleNameByRoleId | exit");
		return roleName;
		
	}
	
	@Transactional
	public List<RoleDTO> getRoleListByOrganization(OrganizationDTO organizationDTO) {
		
		log.debug("RoleServiceImpl | getRoleListByOrganization | entry");
		List<OrganizationRoleDTO> organizationRoleList = organizationRoleDao.findByOrganizationDTO(organizationDTO);
		List<RoleDTO> roleList = new ArrayList<RoleDTO>();
		for(OrganizationRoleDTO o : organizationRoleList) {
			roleList.add(o.getRoleDTO());
		}
		log.debug("RoleServiceImpl | getRoleListByOrganization | exit");
		return roleList;
		
	}

	public AjaxListResponse getRoleAjaxListResponse(String currentLoginOu,
			int currentLoginHierarchyLevel,
			DataTableParameterObj dataTableParameters) {
		
		log.debug("RoleServiceImpl | getRoleAjaxListResponse | entry");
		
		List<OrganizationRoleDTO> searchResults = new ArrayList<OrganizationRoleDTO>();
		Page<OrganizationRoleDTO> onePageSearchResults = null;
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		
		if(currentLoginOu == ROOT_ADMIN_OU) {
			
			searchResults = organizationRoleDao.findByRoleDTO_RoleIdGreaterThanAndOrganizationDTO_hierarchyLevelBetween(
	        		Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginHierarchyLevel, currentLoginHierarchyLevel+1);
			
			onePageSearchResults = organizationRoleDao.findByRoleDTO_RoleIdGreaterThanAndOrganizationDTO_hierarchyLevelBetween(
					Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginHierarchyLevel, currentLoginHierarchyLevel+1, pageRequest);
			
		}else {
			
			searchResults = organizationRoleDao.findByOrganizationDTO_OuAndRoleDTO_RoleIdGreaterThanOrOrganizationDTO_OuLikeAndRoleDTO_RoleIdGreaterThanAndOrganizationDTO_hierarchyLevelBetween(
	        		currentLoginOu, Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginOu+".%", Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginHierarchyLevel, currentLoginHierarchyLevel+1);
			
			onePageSearchResults = organizationRoleDao.findByOrganizationDTO_OuAndRoleDTO_RoleIdGreaterThanOrOrganizationDTO_OuLikeAndRoleDTO_RoleIdGreaterThanAndOrganizationDTO_hierarchyLevelBetween(
					currentLoginOu, Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginOu+".%", Long.valueOf(MAX_PREDEFINED_ROLE_ID), currentLoginHierarchyLevel, currentLoginHierarchyLevel+1, pageRequest);
		}
        
		Long totalRecords = (long)searchResults.size();
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults, currentLoginHierarchyLevel);
		
		log.debug("RoleServiceImpl | getRoleAjaxListResponse | exit");
		return resp;
		
	}
	
	private Pageable setUpPageRequest(DataTableParameterObj dataTableParameters) {
		
		log.debug("RoleServiceImpl | setUpPageRequest | entry");
		
		String columnName = ROLE_COLUMN_0;
		switch(dataTableParameters.getiSortCol_0()) {
			case 0: columnName=ROLE_COLUMN_0;
					break;
			case 1: columnName=ROLE_COLUMN_1;
					break;
			case 2: columnName=ROLE_COLUMN_2;
					break;
			case 3: columnName=ROLE_COLUMN_3;
					break;
			default: columnName=ROLE_COLUMN_0;
					break;
		}
		
		int displayLength = dataTableParameters.getiDisplayLength();
		int pageIndex = dataTableParameters.getiDisplayStart()/displayLength;
		
		Direction direction = Sort.Direction.ASC;
		
		if(StringUtils.equals(dataTableParameters.getsSortDir_0(), SORT_DIRECTION)) {
			direction = Sort.Direction.ASC;
		}else {
			direction = Sort.Direction.DESC;
		}
		
		log.debug("RoleServiceImpl | setUpPageRequest | exit");
		return new PageRequest(pageIndex, displayLength, direction, columnName);
	}
	
	private AjaxListResponse setUpAjaxListResponse(
			String sEcho, Long totalRecords,
			Page<OrganizationRoleDTO> onePageSearchResults, int currentLoginHierarchyLevel) {
		
		log.debug("RoleServiceImpl | AjaxListResponse | entry");
		
		AjaxListResponse resp = new AjaxListResponse();
		resp.setsEcho(sEcho);
		resp.setiTotalRecords(totalRecords);
		resp.setiTotalDisplayRecords(totalRecords);
		List<Map<String, Object>> aaList = new LinkedList<Map<String, Object>>();
		for (OrganizationRoleDTO or : onePageSearchResults) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put("0", or.getRoleDTO().getRoleId());
			m.put("1", LongWrapUtils.LongtoWrap(or.getRoleDTO().getName()));
			m.put("2", showOuFromCurrentHierarchy(currentLoginHierarchyLevel, or.getOrganizationDTO().getOu()));
			m.put("3", organizationAliasDao.findByHierarchyLevel(or.getOrganizationDTO().getHierarchyLevel()).get(0).getAliasName());
			m.put("4", or.getOrganizationDTO().getOrganizationId());
			m.put("5", "<button class='fa fa-pencil btn btn-success editButton'></button>");
			m.put("DT_RowId", or.getRoleDTO().getRoleId());
			aaList.add(m);
		}
	
		resp.setAaData(aaList);
		log.debug("RoleServiceImpl | AjaxListResponse | exit");
		return resp;
	}

	@Transactional
	public RoleDTO saveRole(RoleDTO roleDTO) throws Exception{
		
		log.debug("RoleServiceImpl | saveRole() | entry");
		
		roleDao.save(roleDTO);
		
		log.debug("RoleServiceImpl | saveRole() | exit");
		return roleDTO;
		
	}

	
	@Transactional
	public  String batchDeleteByRoleIdList(String idList) {
		String[] splitId = null;
		splitId = idList.split(",");
		String roleIsUsedByAccount = null;
		for (int i = 0; i < splitId.length; i++) {
			
			List<AccountDTO> accountList = accountDao.findByRoleDTO_RoleId(Long.valueOf(splitId[i]));
			if(accountList.size()==0) {
				roleDao.delete(Long.valueOf(splitId[i]));
			}else {
				roleIsUsedByAccount += "," + roleDao.findOne(Long.valueOf(splitId[i])).getName();
			}
			
		}
		return roleIsUsedByAccount;
	}
	
	
	@Transactional
	public boolean isUniqueRoleName(String ou, String roleName) {
		
		boolean isUniqueRoleName = true;
		List<OrganizationRoleDTO> roleList = organizationRoleDao.findByOrganizationDTO_OuAndRoleDTO_Name(ou, roleName);
		if(roleList.size()!=0) {
			isUniqueRoleName = false;
		}
		return isUniqueRoleName;
		
	}
	
	@Transactional
	public boolean checkUniqueRoleNameExcludeRoleNameIsBeingEditing(Long roleId, String ou, String roleName) {
		boolean isUniqueRoleName = true;
		List<OrganizationRoleDTO> roleList = organizationRoleDao.findByOrganizationDTO_OuAndRoleDTO_NameAndRoleDTO_RoleIdNot(ou, roleName, roleId);
		if(roleList.size()!=0) {
			isUniqueRoleName = false;
		}
		return isUniqueRoleName;
	}
	
	
}
