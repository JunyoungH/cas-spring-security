package com.techstudio.service.am;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sun.jersey.core.util.MultivaluedMapImpl;
import com.techstudio.common.AjaxListResponse;
import com.techstudio.common.EasyClient;
import com.techstudio.common.StatusCode;
import com.techstudio.common.am.PiwikAPIResponse;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.dao.am.PiwikSiteDao;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.PiwikSiteDTO;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.util.PrincipalUtils;

@Service
public class PiwikSiteServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(PiwikSiteServiceImpl.class);
	
	private static final String COLUMN_NAME_0 = "siteId";
	private static final String COLUMN_NAME_1 = "piwikSiteId";
	private static final String COLUMN_NAME_2 = "siteName";
	private static final String COLUMN_NAME_3 = "url";
	private static final String COLUMN_NAME_4 = "ou";
	
	private static final boolean PIWIK_API_CREATE = false;
	private static final boolean PIWIK_API_UPDATE = true;
	
	@Autowired  
	private OrganizationDao organizationDao;
	
	@Autowired  
	private PiwikSiteDao piwikSiteDao;
	
	@Value("${wilascp.piwik.add.url}")
	private String WILAS_CP_PIWIK_ADD_URL;
	
	@Value("${wilaspiwik.api.url}")
	private String WILAS_PIWIK_API_URL;
	
	@Value("${wilascp.piwik.delete.url}")
	private String WILAS_CP_PIWIK_DELETE_URL;
	
	@Value("${analytic.server.url}")
	private String ANALYTIC_SERVER_URL;
	
	@Value("${token.auth}")
	private String TOKEN_AUTH;
	
	@Transactional
	public AjaxListResponse getPiwikSiteAjaxListResponse(
			Long organizationId,
			DataTableParameterObj dataTableParameters,
			int currentLoginHierarchyLevel) {
		
		log.debug("PiwikServiceImpl | getPiwikAjaxListResponse() | entry");
		
        List<PiwikSiteDTO> searchResults = piwikSiteDao.findByOrganizationDTO_OrganizationId(organizationId);
		Long totalRecords = (long)searchResults.size();
		
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		Page<PiwikSiteDTO> onePageSearchResults = piwikSiteDao.findByOrganizationDTO_OrganizationId(organizationId, pageRequest);
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults, currentLoginHierarchyLevel);
		
		log.debug("PiwikServiceImpl | getPiwikAjaxListResponse() | exit");
		return resp;
	}

	private Pageable setUpPageRequest(DataTableParameterObj dataTableParameters) {
		
		log.debug("PiwikServiceImpl | setUpPageRequest() | entry");
		
		String columnName = COLUMN_NAME_0;
		switch(dataTableParameters.getiSortCol_0()) {
			case 0: columnName=COLUMN_NAME_0;
					break;
			case 1: columnName=COLUMN_NAME_1;
					break;
			case 2: columnName=COLUMN_NAME_2;
					break;
			case 3: columnName=COLUMN_NAME_3;
					break;
			case 4: columnName=COLUMN_NAME_4;
					break;
			default: columnName=COLUMN_NAME_0;
					break;
		}
		
		int displayLength = dataTableParameters.getiDisplayLength();
		int pageIndex = dataTableParameters.getiDisplayStart()/displayLength;
		
		Direction direction = Sort.Direction.ASC;
		
		if(StringUtils.equals(dataTableParameters.getsSortDir_0(), SORT_DIRECTION)) {
			direction = Sort.Direction.ASC;
		}else {
			direction = Sort.Direction.DESC;
		}
		
		log.debug("PiwikServiceImpl | setUpPageRequest() | exit");
		return new PageRequest(pageIndex, displayLength, direction, columnName);
	}
	
	private AjaxListResponse setUpAjaxListResponse(
			String sEcho, Long totalRecords,
			Page<PiwikSiteDTO> onePageSearchResults,
			int currentLoginHierarchyLevel) {
		
		log.debug("PiwikServiceImpl | AjaxListResponse() | entry");
		
		AjaxListResponse resp = new AjaxListResponse();
		resp.setsEcho(sEcho);
		resp.setiTotalRecords(totalRecords);
		resp.setiTotalDisplayRecords(totalRecords);
		List<Map<String, Object>> aaList = new LinkedList<Map<String, Object>>();
		for (PiwikSiteDTO p : onePageSearchResults) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put("0", p.getSiteId());
			m.put("1", p.getPiwikSiteId());
			m.put("2", p.getSiteName());
			m.put("3", p.getUrl());
			m.put("4", showOuFromCurrentHierarchy(currentLoginHierarchyLevel, p.getOu()));
			m.put("5", p.getOu());
			m.put("DT_RowId", p.getSiteId());
			aaList.add(m);
		}
	
		resp.setAaData(aaList);
		log.debug("PiwikServiceImpl | AjaxListResponse() | exit");
		return resp;
	}
	
	@Transactional
	public String savePiwikSiteOldVersion(HttpServletRequest req,
			String DN, boolean isUpdate) throws Exception {
		
		PiwikSiteDTO piwikSiteDTO;
		String checkPiwikApi = null;
		Long piwikSiteId = null;
		if(isUpdate) {
			piwikSiteDTO = updatePiwikSiteDTOOldVersion(req, DN);
			/* Call piwik module API */
			checkPiwikApi = updatePiwikViaApi(piwikSiteDTO.getSiteName(), piwikSiteDTO.getPiwikSiteId().toString());
			/* Call piwik module API */
		}else {
			
			/* Call piwik module API */
			piwikSiteId = addPiwikViaApi(req.getParameter("site_name"));
			/* Call piwik module API */
			piwikSiteDTO = setUpPiwikSiteDTOOldVersion(piwikSiteId, req);
		}
		
		if(isUpdate && !checkPiwikApi.equals("success")) {
			
			log.info("|extenalPiwikAPI()|"+StatusCode.UPDATE_FAILED+"|" + DN + "|site_id = "+req.getParameter("site_id")
		    		+ "|Update Piwik API failed.");
			return "false";
			
		}else {
			
			piwikSiteDao.save(piwikSiteDTO);
			savePiwikToCpModule(piwikSiteDTO);
			
			log.info("|extenalPiwikAPI()|"+StatusCode.UPDATE_SUCCESS+"|" + DN + "|site_id = "+req.getParameter("site_id")
		    		+ "|Call Add or Update Piwik API, Add or Update CP Piwik API and save to Database successfully.");
			return "true";
		}
		
			
	}
	
	@Transactional
	public String savePiwikSite(String ou,
			String siteName, Long cpId,
			String DN, boolean isUpdate) throws Exception {
		PiwikSiteDTO piwikSiteDTO;
		String checkPiwikApi = null;
		Long piwikSiteId = null;
		OrganizationDTO organizationDTO = organizationDao.findByOu(ou).get(0);
		if(isUpdate) {
			piwikSiteDTO = updatePiwikSiteDTO(siteName, cpId, DN, organizationDTO);
			/* Call piwik module API */
			checkPiwikApi = updatePiwikViaApi(piwikSiteDTO.getSiteName(), piwikSiteDTO.getPiwikSiteId().toString());
			/* Call piwik module API */
		}else {
			
			/* Call piwik module API */
			piwikSiteId = addPiwikViaApi(siteName);
			/* Call piwik module API */
			piwikSiteDTO = new PiwikSiteDTO(siteName, ANALYTIC_SERVER_URL, organizationDTO.getOu(), piwikSiteId,
					cpId, organizationDTO);
		}
		
		if(isUpdate && !checkPiwikApi.equals("success")) {
			
			log.info("|extenalPiwikAPI()|"+StatusCode.UPDATE_FAILED+"|" + DN + "|site_id = " + piwikSiteDTO.getSiteId()
		    		+ "|Update Piwik API failed.");
			return "false";
			
		}else {
			
			piwikSiteDao.save(piwikSiteDTO);
			savePiwikToCpModule(piwikSiteDTO);
			
			log.info("|extenalPiwikAPI()|"+StatusCode.UPDATE_SUCCESS+"|" + DN + "|site_id = " + piwikSiteDTO.getSiteId()
		    		+ "|Call Add or Update Piwik API, Add or Update CP Piwik API and save to Database successfully.");
			return "true";
		}
		
			
	}
	
	
	private PiwikSiteDTO setUpPiwikSiteDTOOldVersion(Long piwikSiteId, HttpServletRequest req) {
		log.debug("PiwikServiceImpl | setUpPiwikSiteDTO() | organization_id: " + req.getParameter("organization_id"));
		log.debug("PiwikServiceImpl | setUpPiwikSiteDTO() | POST | site_name: " + req.getParameter("site_name"));
		log.debug("PiwikServiceImpl | setUpPiwikSiteDTO() | POST | url: " + req.getParameter("url"));
		log.debug("PiwikServiceImpl | setUpPiwikSiteDTO() | POST | piwik_site_id: " + req.getParameter("piwik_site_id"));
		PiwikSiteDTO piwikSiteDTO = new PiwikSiteDTO();
		
		/*Set piwikSiteDTO attributes */
		OrganizationDTO organizationDTO = organizationDao.findOne(Long.valueOf(req.getParameter("organization_id")));
		piwikSiteDTO.setOu(organizationDTO.getOu());
		piwikSiteDTO.setSiteName(req.getParameter("site_name"));
		piwikSiteDTO.setUrl(req.getParameter("url"));
		piwikSiteDTO.setPiwikSiteId(piwikSiteId);
		piwikSiteDTO.setOrganizationDTO(organizationDTO);
		/*Set piwikSiteDTO attributes */
		return piwikSiteDTO;
	}
	
	
	private PiwikSiteDTO updatePiwikSiteDTOOldVersion(HttpServletRequest req,
			String DN) {
		log.debug(DN+" is trying to edit a piwik which site_id= " + req.getParameter("site_id"));
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | site_id: " + req.getParameter("site_id"));
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | site_name: " + req.getParameter("site_name"));
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | url: " + req.getParameter("url"));
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | piwik_site_id: " + req.getParameter("piwik_site_id"));
		
		PiwikSiteDTO piwikSiteDTO = piwikSiteDao.findOne(Long.valueOf(req.getParameter("site_id")));
		
		/*Set piwikSiteDTO attributes */
		piwikSiteDTO.setSiteName(req.getParameter("site_name"));
		piwikSiteDTO.setUrl(req.getParameter("url"));
		piwikSiteDTO.setPiwikSiteId(Long.valueOf(req.getParameter("piwik_site_id")));
		/*Set piwikSiteDTO attributes */
		return piwikSiteDTO;
	}
	

	private PiwikSiteDTO updatePiwikSiteDTO(String siteName, Long cpId,
			String DN, OrganizationDTO organizationDTO) {
		
		PiwikSiteDTO piwikSiteDTO = piwikSiteDao.findByCpId(cpId);
		log.debug(DN+" is trying to edit a piwik which site_id= " + piwikSiteDTO.getSiteId());
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | site_name: " + siteName);
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | url: " + piwikSiteDTO.getUrl());
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | piwik_site_id: " + piwikSiteDTO.getPiwikSiteId());
		log.debug("PiwikServiceImpl | updatePiwikSiteDTO() | POST | cp_id: " + cpId);
		
		/*Set piwikSiteDTO attributes */
		piwikSiteDTO.setOrganizationDTO(organizationDTO);
		piwikSiteDTO.setOu(organizationDTO.getOu());
		piwikSiteDTO.setSiteName(siteName);
		/*Set piwikSiteDTO attributes */
		return piwikSiteDTO;
	}
	
	private String savePiwikToCpModule(PiwikSiteDTO piwikSiteDTO) throws Exception 
	{
		
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | entry");
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | id: "+piwikSiteDTO.getSiteId().toString());
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | organizaiton_ou: "+piwikSiteDTO.getOu());
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | label: "+piwikSiteDTO.getSiteName());
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | url: "+piwikSiteDTO.getUrl());
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | url_id: "+piwikSiteDTO.getPiwikSiteId().toString());
		
		String saveCpPiwikUrl = WILAS_CP_PIWIK_ADD_URL+SPRING_EXT;      // Please config url in config file
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | saveCpPiwikUrl: " + saveCpPiwikUrl);
		
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("id", piwikSiteDTO.getSiteId().toString());
		formData.add("ou", piwikSiteDTO.getOu());
		formData.add("label", piwikSiteDTO.getSiteName());
		formData.add("url", "//"+piwikSiteDTO.getUrl());
		formData.add("url_id", piwikSiteDTO.getPiwikSiteId().toString());
		
		String result = (String) httpBackendPost(saveCpPiwikUrl, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("PiwikServiceImpl | savePiwikToCpModule() | POST | exit");
		return result;

	}
	
	private Long addPiwikViaApi(
			String site_name
			) throws Exception 
	{
		
		log.debug("PiwikServiceImpl | addPiwikViaApi | GET | entry");
		log.debug("PiwikServiceImpl | addPiwikViaApi | GET | site_name: "+site_name);
		
		String addPiwikApi = WILAS_PIWIK_API_URL;      // Please config url in config file 
		
		String piwik_api = piwikAPIFormatBuilder(site_name, null, addPiwikApi, PIWIK_API_CREATE);
		
		log.debug("PiwikServiceImpl | addPiwikViaApi | GET | piwik_api: " + piwik_api);
		
		String result = (String) httpBackendGet(new EasyClient().getClient(), piwik_api, MediaType.TEXT_HTML, String.class);
		result = result.substring(1, result.length()-1); //remove curly brackets
		String[] keyValuePairs = result.split(":");
		log.debug("PiwikServiceImpl | addPiwikViaApi | GET | result: "+keyValuePairs[1]);
		log.debug("PiwikServiceImpl | addPiwikViaApi | GET | exit");
		return Long.valueOf(keyValuePairs[1]);

	}

	
	private String updatePiwikViaApi(
			String site_name,
			String piwik_site_id
			) throws Exception 
	{
		
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | entry");
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | site_name: "+site_name);
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | piwik_site_id: "+piwik_site_id);
		
		String addPiwikApi = WILAS_PIWIK_API_URL;      // Please config url in config file 
		
		String piwik_api = piwikAPIFormatBuilder(site_name, piwik_site_id, addPiwikApi, PIWIK_API_UPDATE);
		
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | piwik_api: " + piwik_api);
		
		PiwikAPIResponse piwikAPIResponse = (PiwikAPIResponse) httpBackendPost(piwik_api, null, new EasyClient().getClient(), MediaType.APPLICATION_JSON, PiwikAPIResponse.class);
		
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | result: "+piwikAPIResponse.getResult()+", message: "+piwikAPIResponse.getMessage());
		log.debug("PiwikServiceImpl | updatePiwikViaApi | GET | exit");
		return piwikAPIResponse.getResult();

	}
	
	
	private String piwikAPIFormatBuilder(String site_name, String piwik_site_id, String URL, boolean isUpdate) {
		StringBuilder piwik_api_sb = new StringBuilder();
		piwik_api_sb.append(URL+"?");
		piwik_api_sb.append("module=API");
		if(isUpdate) {
			piwik_api_sb.append("&method=SitesManager.updateSite");
			piwik_api_sb.append("&idSite=").append(piwik_site_id);
		}else{
			piwik_api_sb.append("&method=SitesManager.addSite");
		}
		try {
			piwik_api_sb.append("&siteName=").append(URLEncoder.encode(site_name, "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			log.info(e,e);
			log.info("|piwikAPIFormatBuilder()|NO ERRORCODE|Site name: "+site_name+", encode failed.");
		}
		piwik_api_sb.append("&currency=SGD");
		piwik_api_sb.append("&format=JSON");
		piwik_api_sb.append("&urls[0]=").append(ANALYTIC_SERVER_URL);
		piwik_api_sb.append("&token_auth=").append(TOKEN_AUTH);
		String piwik_api = piwik_api_sb.toString();
		return piwik_api;
	}
	
	
	@Transactional
	public void batchDeletePiwik(String siteIdList, String piwikSiteIdList,
			String DN) throws Exception {
		String[] splitSiteId = null;
		String[] splitPiwikSiteId = null;
		
		splitSiteId = siteIdList.split(",");
		splitPiwikSiteId = piwikSiteIdList.split(",");
		
		for (int i = 0; i < splitSiteId.length; i++) {
			
			deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite(DN, splitSiteId[i], splitPiwikSiteId[i]);

		}
	}

	
	@Transactional
	public void batchDeletePiwikByCpIdList(String cpIdList,
			String DN) throws Exception {
		
		String[] splitCpId = null;
		splitCpId = cpIdList.split(",");
		
		for (int i = 0; i < splitCpId.length; i++) {
			
			PiwikSiteDTO piwikSiteDTO = piwikSiteDao.findByCpId(Long.valueOf(splitCpId[i]));
			log.debug(DN +" is trying to delete a piwik which site_name = " + piwikSiteDTO.getSiteName());
			
			deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite(DN, piwikSiteDTO.getSiteId().toString(), piwikSiteDTO.getPiwikSiteId().toString());

		}
	}

}
