package com.techstudio.service.am;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.techstudio.common.AjaxListResponse;
import com.techstudio.dao.am.AccountDao;
import com.techstudio.dao.am.AccountSpecifications;
import com.techstudio.dao.am.OrganizationAliasDao;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.dao.am.RoleDao;
import com.techstudio.dao.am.TokenDao;
import com.techstudio.model.am.AccountDTO;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.TokenDTO;
import com.techstudio.model.am.filter.AccountFilterObj;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.util.LongWrapUtils;
import com.techstudio.util.RandomStr;

@Service
public class AccountServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(AccountServiceImpl.class);
	
	private static final String ACCOUNT_COLUMN_0 = "accountId";
	private static final String ACCOUNT_COLUMN_1 = "organizationDTO.hierarchyLevel";
	private static final String ACCOUNT_COLUMN_2 = "ou";
	private static final String ACCOUNT_COLUMN_3 = "firstName";
	private static final String ACCOUNT_COLUMN_4 = "midName";
	private static final String ACCOUNT_COLUMN_5 = "lastName";
	private static final String ACCOUNT_COLUMN_6 = "contractNum";
	private static final String ACCOUNT_COLUMN_7 = "loginUid";
	private static final String ACCOUNT_COLUMN_8 = "status";
	private static final String ACCOUNT_COLUMN_9 = "organizationDTO.hierarchyLevel";
	
	private static final int ACCOUNT_STATUS_SUSPEND = 0;
	private static final int ACCOUNT_STATUS_ACTIVE = 1;
	
	private static final int ACCOUNT_DELETE_FLAG_NORMAL = 0;
	private static final int ACCOUNT_DELETE_FLAG_DELETED = 1;
	
	private static final int ORGANIZATION_STATUS_ACTIVE = 1;
	
	@Autowired  
	private MessageSource messageSource;
	
	@Autowired  
	private AccountDao accountDao;
	
	@Autowired  
	private OrganizationDao organizationDao;
	
	@Autowired  
	private OrganizationAliasDao organizationAliasDao;
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private TokenDao tokenDao;
	
	@Value("${token.resetpassword.expire}")
	private String TOKEN_RESETPASSWORD_EXPIRED;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	

	@Transactional
	public AccountDTO saveAccount(AccountDTO accountDTO, Long roleId) throws Exception{
		
		log.debug("AccountServiceImpl | saveAccount() | entry");
		
		//Generate a random password for user
		accountDTO.setEncryptedPassword(bCryptPasswordEncoder.encode(RandomStr.randomStr()));
		accountDTO.setPasswordLastUpdated(new Date());
		accountDTO.setCreatedDate(new Date());
		accountDTO.setLastUpdated(new Date());
		accountDTO.setDeleteFlag(ACCOUNT_DELETE_FLAG_NORMAL);
		accountDTO.setRoleDTO(roleDao.findOne(roleId));
		accountDTO.setOrganizationDTO(organizationDao.findByOu(accountDTO.getOu()).get(0));
		AccountDTO result = accountDao.save(accountDTO);
		
		log.debug("AccountServiceImpl | saveAccount() | exit");
		
		return result;
		
	}
	
	@Transactional
	public void updateAccountInfoAndDeleteToken(Long accountId, String loginUid, String token, String password) throws Exception{
		
		log.debug("AccountServiceImpl | updateAccountInfoAndDeleteToken() | entry");
		
		updateAccountConfidential(accountId, loginUid, password);
		tokenDao.deleteByToken(token);
		
		log.debug("AccountServiceImpl | updateAccountInfoAndDeleteToken() | exit");
		
	}
	
	@Transactional
	public void updateAccountConfidential(Long accountId, String loginUid, String password) throws Exception{
		
		log.debug("AccountServiceImpl | updateAccountConfidential() | entry");
		
		AccountDTO updateAccountDTO = accountDao.findByAccountId(accountId);
		updateAccountDTO.setLoginUid(loginUid);
		updateAccountDTO.setEncryptedPassword(bCryptPasswordEncoder.encode(password));
		updateAccountDTO.setPasswordLastUpdated(new Date());
		updateAccountDTO.setLastUpdated(new Date());
		accountDao.save(updateAccountDTO);
		
		log.debug("AccountServiceImpl | updateAccountConfidential() | exit");
		
	}
	
	
	@Transactional
	public void updateAccountInfo(AccountDTO account, Long roleId) throws Exception{
		
		log.debug("AccountServiceImpl | updateAccountInfo() | entry");
		AccountDTO originalAccount = accountDao.findOne(account.getAccountId());
		account.setLastUpdated(new Date());
		account.setOrganizationDTO(originalAccount.getOrganizationDTO());
		account.setRoleDTO(roleDao.findOne(roleId));
		accountDao.save(account);
		
		log.debug("AccountServiceImpl | updateAccountInfo() | exit");
		
	}
	
	@Transactional
	public String getPageDestinationByTokenChecking(String token)
			throws Exception {
		
		log.debug("AccountServiceImpl | getPageDestinationByTokenChecking() | entry");
		
		TokenDTO tokenDTO = tokenDao.findByToken(token).get(0);
		
		Calendar cal = Calendar.getInstance(); // creates calendar
		cal.setTime(new Date()); // sets calendar time/date
		
	    if ( cal.getTime().getTime() - tokenDTO.getGeneratedDate().getTime() >= Long.valueOf(TOKEN_RESETPASSWORD_EXPIRED)) {
	    	log.debug("AccountServiceImpl | getPageDestinationByTokenChecking() | exit");
	    	return "token_expired";
	    }else {
	    	log.debug("AccountServiceImpl | getPageDestinationByTokenChecking() | exit");
	    	return "";
	    }
		
	}
	
	
	@Transactional
	public AccountDTO getAccountById(long accountId) {
		
		log.debug("AccountServiceImpl | getAccountById | entry");
		
		AccountDTO accountDTO = accountDao.findByAccountId(accountId);
		
		log.debug("AccountServiceImpl | getAccountById | exit");
		return accountDTO;
	}
	
	@Transactional
	public boolean hasAccountExisted(String email) {
		
		log.debug("AccountServiceImpl | hasAccountExisted | entry");
		
		boolean checkingResult = false;
		List<AccountDTO> accountList = accountDao.findByLoginUid(email);
		if(accountList.size()>0) {
			checkingResult = true;
		}
		
		log.debug("AccountServiceImpl | hasAccountExisted | exit");
		return checkingResult;
	}
	
	@Transactional
	public void changeAccountDeleteFlagByIdList(String idList, String userInfo, int deleteFlag) throws Exception{
		String[] splitId = null;
		splitId = idList.split(",");
		int i = 0;
		try {
			for (; i < splitId.length; i++) {

				AccountDTO accountDTO = accountDao.findByAccountId(Long.valueOf(splitId[i]));
				accountDTO.setDeleteFlag(deleteFlag);
				accountDTO.setLastUpdated(new Date());
				accountDao.save(accountDTO);
				
				printLog(userInfo, deleteFlag, splitId[i], true);
					
				
			}
		} catch (Exception e) {
			
			printLog(userInfo, deleteFlag, splitId[i], false);
			throw e;
			
		}
	}

	private void printLog(String userInfo, int deleteFlag, String splitId, boolean isSuccess) {
		switch(deleteFlag){
			case ACCOUNT_DELETE_FLAG_NORMAL :
				log.info("|changeAccountDeleteFlagByIdList()|"+userInfo+"|accountId = "+splitId + "|delete flag set to normal "+ (isSuccess ? "successfully" : "failed")+".");
			   break;
			case ACCOUNT_DELETE_FLAG_DELETED :
				log.info("|changeAccountDeleteFlagByIdList()|"+userInfo+"|accountId = "+splitId + "|delete flag set to deleted "+ (isSuccess ? "successfully" : "failed")+".");
			   break;
		}
	}
	
	
	@Transactional
	public AjaxListResponse getAccountAjaxListResponse(
			AccountFilterObj filter, 
			DataTableParameterObj dataTableParameters,
			String isAdmin,
			String isReadOnly,
			String isManage,
			String loginEmail) {
		
		log.debug("AccountServiceImpl | getOrganizationAjaxListResponse | entry");
		AccountDTO accountDTO = accountDao.findByLoginUid(loginEmail).get(accountDao.findByLoginUid(loginEmail).size()-1);
		Specification<AccountDTO> searchSpec = AccountSpecifications.getAccountListByFilter(VIEW_LAYERS, filter, accountDTO.getAccountId());
        List<AccountDTO> searchResults = accountDao.findAll(searchSpec);
		Long totalRecords = (long)searchResults.size();
		
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		Page<AccountDTO> onePageSearchResults = accountDao.findAll(searchSpec, pageRequest);
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults, filter.getLoginHierarchyLevel(), isAdmin, isReadOnly, isManage);
		log.debug("AccountServiceImpl | getOrganizationAjaxListResponse | exit");
		return resp;
	}
	
	private Pageable setUpPageRequest(DataTableParameterObj dataTableParameters) {
		
		log.debug("AccountServiceImpl | setUpPageRequest | entry");
		
		String columnName = ACCOUNT_COLUMN_0;
		log.debug("AccountServiceImpl | setUpPageRequest | getiSortCol_0: "+dataTableParameters.getiSortCol_0());
		switch(dataTableParameters.getiSortCol_0()) {
			case 0: columnName=ACCOUNT_COLUMN_0;
					break;
			case 1: columnName=ACCOUNT_COLUMN_1;
					break;
			case 2: columnName=ACCOUNT_COLUMN_2;
					break;
			case 3: columnName=ACCOUNT_COLUMN_3;
					break;
			case 4: columnName=ACCOUNT_COLUMN_4;
					break;
			case 5: columnName=ACCOUNT_COLUMN_5;
					break;
			case 6: columnName=ACCOUNT_COLUMN_6;
					break;
			case 7: columnName=ACCOUNT_COLUMN_7;
					break;
			case 8: columnName=ACCOUNT_COLUMN_8;
					break;
			case 9: columnName=ACCOUNT_COLUMN_9;
					break;
			default: columnName=ACCOUNT_COLUMN_0;
					break;
		}
		
		int displayLength = dataTableParameters.getiDisplayLength();
		int pageIndex = dataTableParameters.getiDisplayStart()/displayLength;
		
		Direction direction = Sort.Direction.ASC;
		log.debug("AccountServiceImpl | setUpPageRequest | getsSortDir_0: "+dataTableParameters.getsSortDir_0());
		if(StringUtils.equals(dataTableParameters.getsSortDir_0(), SORT_DIRECTION)) {
			direction = Sort.Direction.ASC;
		}else {
			direction = Sort.Direction.DESC;
		}
		log.debug("AccountServiceImpl | setUpPageRequest | columnName: "+columnName);
		log.debug("AccountServiceImpl | setUpPageRequest | exit");
		return new PageRequest(pageIndex, displayLength, direction, columnName);
	}
	
	//TODO refactor if else statement
	private AjaxListResponse setUpAjaxListResponse(
			String sEcho, Long totalRecords,
			Page<AccountDTO> onePageSearchResults,
			int currentLoginHierarchyLevel,
			String isAdmin,
			String isReadOnly,
			String isManage
			) {
		
		log.debug("AccountServiceImpl | setUpAjaxListResponse | entry");
		
		String statusActive = "<span style='color:#00ff00'>" + messageSource.getMessage("table.status.active", null, getCurrentLocale()) + "</span>";
		String statusInactive = "<span style='color:#ff0000'>" + messageSource.getMessage("table.status.suspended", null, getCurrentLocale())+ "</span>";
		
		AjaxListResponse resp = new AjaxListResponse();
		resp.setsEcho(sEcho);
		resp.setiTotalRecords(totalRecords);
		resp.setiTotalDisplayRecords(totalRecords);
		List<Map<String, Object>> aaList = new LinkedList<Map<String, Object>>();
		
		for (AccountDTO a : onePageSearchResults) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put("0", a.getAccountId());
			m.put("1", organizationAliasDao.findByHierarchyLevel(a.getOrganizationDTO().getHierarchyLevel()).get(0).getAliasName());
			m.put("2", showOuFromCurrentHierarchy(currentLoginHierarchyLevel, a.getOu()));
			m.put("3", LongWrapUtils.LongtoWrap(a.getFirstName()));
			m.put("4", LongWrapUtils.LongtoWrap(a.getMidName()));
			m.put("5", LongWrapUtils.LongtoWrap(a.getLastName()));
			m.put("6", a.getContractNum());
			m.put("7", LongWrapUtils.LongtoWrap(a.getLoginUid()));
			m.put("8", a.getStatus()==1 ? statusActive : statusInactive);
			m.put("9", a.getOrganizationDTO().getHierarchyLevel());
//			System.out.println("isAdmin: "+isAdmin);
//			System.out.println("isReadOnly: "+isReadOnly);
//			System.out.println("isManage: "+isManage);
//			System.out.println("level1: "+a.getOrganizationDTO().getHierarchyLevel());
//			System.out.println("level2: "+currentLoginHierarchyLevel);
			boolean isEditable = true;
			if(isAdmin.equals("true") && isReadOnly.equals("true") && isManage.equals("true")&& (a.getOrganizationDTO().getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("true") && isReadOnly.equals("false") && isManage.equals("false")&& (a.getOrganizationDTO().getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("true") && isReadOnly.equals("false") && isManage.equals("true")&& (a.getOrganizationDTO().getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("true") && isManage.equals("false")) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("false") && isManage.equals("true") && (a.getOrganizationDTO().getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("false") && isManage.equals("false")) {
				isEditable = false;
			}
			m.put("10", isEditable ? "<button class='fa fa-pencil btn btn-success editButton'></button>" : "<button class='fa fa-eye btn btn-success readOnlyButton'></button>");
			m.put("DT_RowId", a.getAccountId());
			aaList.add(m);
		}

		resp.setAaData(aaList);
		log.debug("AccountServiceImpl | setUpAjaxListResponse | exit");
		
		return resp;
	}
	
	@Transactional
	public AccountDTO getAccountByLdapUid(String loginUid) throws Exception{
		log.debug("AccountServiceImpl | getAccountByLdapUid | entry");
		
		AccountDTO accountDTO = new AccountDTO();
		
		List<AccountDTO> accountList = accountDao.findByLoginUid(loginUid);
		accountDTO = accountList.get(0);
		log.debug("AccountServiceImpl | getAccountByLdapUid() | Get accountDTO which email = "+accountDTO.getLoginUid());
		log.debug("AccountServiceImpl | getAccountByLdapUid() | AccountDTO: "+accountDTO.toString());
		
		log.debug("AccountServiceImpl | getAccountByLdapUid | exit");
		return accountDTO;
	}

	@Transactional
	public boolean checkUniqueLoginUid(String loginUid) {
		boolean isUniqueLoginUid = true;
		List<AccountDTO> accountList = accountDao.findByDeleteFlagNotAndLoginUid(ACCOUNT_DELETE_FLAG_DELETED, loginUid);
		if(accountList.size()!=0) {
			isUniqueLoginUid = false;
		}
		return isUniqueLoginUid;
	}
	
	@Transactional
	public boolean checkUniqueLoginUidExcludeLoginUidIsBeingEditing(Long accountId, String loginUid) {
		
		boolean isUniqueLdapUid = true;
		List<Long> accounts = new ArrayList<Long>();
		accounts.add(accountId);
		List<AccountDTO> accountList = accountDao.findByDeleteFlagNotAndLoginUidAndAccountIdNotIn(ACCOUNT_DELETE_FLAG_DELETED, loginUid, accounts);
//		OrganizationDTO organizationToEdit = organizationDao.findOne(organizationId);
		if(accountList.size()!=0) {
			isUniqueLdapUid = false;
		}
		return isUniqueLdapUid;
	}

	
	@Transactional
	public int getAccountStatusByLoginUid(String loginUid) {
		
		List<AccountDTO> accountList = accountDao.findByLoginUidAndStatus(loginUid, ACCOUNT_STATUS_ACTIVE);
		if(accountList.size()!=0) {
			
			AccountDTO accountDTO = accountList.get(0);
			OrganizationDTO organizationDTO = accountDTO.getOrganizationDTO();
			if(organizationDTO.getStatus() == ORGANIZATION_STATUS_ACTIVE) {
				return ACCOUNT_STATUS_ACTIVE;
			}
			
		}
		
		return ACCOUNT_STATUS_SUSPEND;
		
	}
	
	
}
