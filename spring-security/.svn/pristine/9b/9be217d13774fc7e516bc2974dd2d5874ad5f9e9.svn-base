package com.techstudio.form.controller.am;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.HttpSessionRequiredException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techstudio.common.AjaxListResponse;
import com.techstudio.common.StatusCode;
import com.techstudio.dao.am.AccountDao;
import com.techstudio.dao.am.CaptivePortalDao;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.dao.am.PiwikSiteDao;
import com.techstudio.form.controller.BaseController;
import com.techstudio.model.am.AuthenticationTypeDTO;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.model.am.filter.OrganizationFilterObj;
import com.techstudio.model.ldap.OUDTO;
import com.techstudio.model.ldap.UsrDTO;
import com.techstudio.service.am.AuthenticationTypeServiceImpl;
import com.techstudio.service.am.CaptivePortalServiceImpl;
import com.techstudio.service.am.LicensesServiceImpl;
import com.techstudio.service.am.OrganizationServiceImpl;
import com.techstudio.service.am.PiwikSiteServiceImpl;
import com.techstudio.service.ldap.GrpService;
import com.techstudio.service.ldap.OUService;
import com.techstudio.service.ldap.UsrService;
import com.techstudio.util.LdapUtils;

//@SessionAttributes(BaseController.SESSION_ATTR_USER)
@Controller
public class LicensesController_12_05_2016 extends BaseController{
	
	private static final Logger log = Logger.getLogger(LicensesController_12_05_2016.class);
	
	private static final String NORMAL_PAGE = "Normal Page";
	
	
	private static final boolean CREATE_CAPTIVE_PORTAL = false;
	private static final boolean UPDATE_CAPTIVE_PORTAL = true;
	
	private static final boolean CREATE_PIWIK_SITE = false;
	private static final boolean UPDATE_PIWIK_SITE = true;
	
	@Autowired
	private AuthenticationTypeServiceImpl authenticationTypeService;
	
	@Autowired
	private OrganizationServiceImpl organizationService;
	
	@Autowired
	private CaptivePortalServiceImpl captivePortalService;
	
	@Autowired
	private LicensesServiceImpl licensesService;
	
	@Autowired
	private PiwikSiteServiceImpl piwikSiteService;
	
	/*============ Plz Delete after refactoring ===========*/
	@Autowired
	private OrganizationDao organizationDao;
	
	@Autowired
	private CaptivePortalDao captivePortalDao;
	
	@Autowired
	private PiwikSiteDao piwikSiteDao;
	
	@Autowired
	private AccountDao accountDao;
	
	/*============ Plz Delete after refactoring ===========*/
	
	@Autowired  
	private MessageSource messageSource;
	
	@Autowired
	private OUDTO odto;
	@Autowired
	private UsrDTO udto;
	
	@Autowired
	private OUService ouSer;
	@Autowired
	private UsrService usr;
	@Autowired
	private GrpService grp;
	
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy' 'HH:mm:ss");
	
	
	@Override
	protected String getModuleFolder() {
		return "licenses/";
	}
	
	
	@ExceptionHandler(HttpSessionRequiredException.class)
	public String handleTimeout() {
		return getRedirectedLoginPath();
	}
	
	
//	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN')")
	@RequestMapping(value = { "licenses/cp_manage" + SPRING_EXT})
	public String index(
			Model model, 
			HttpServletRequest req, 
			Authentication principal
			) {

		log.debug("LicensesController | licenses/cp_manage | entry");
		
		List<AuthenticationTypeDTO> authenticationTypeList = authenticationTypeService.getAuthenticationTypeListExcept(NORMAL_PAGE);
		
		model.addAttribute("AuthenticationTypeList", authenticationTypeList);
		
		log.debug("LicensesController | licenses/cp_manage | exit");
		return goToPageJsp("cp_manage");

	}


//	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN')")
	@ResponseBody
	@RequestMapping(value = "licenses/ajax_organization_list" + SPRING_EXT, headers = "Accept=application/json")
	public AjaxListResponse ajax_organization_list(
			Model model,
			String sEcho,
			int iDisplayStart,
			int iDisplayLength,
			String sSearch,
			int iSortCol_0,
			String sSortDir_0,
			HttpServletRequest req,
			HttpServletResponse rep,
			HttpSession ses,
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/ajax_organization_list | entry");

		OrganizationFilterObj filter = new OrganizationFilterObj(getCurrentLoginHierarchyLevel(LdapUtils.getOuWithDot(principal)),  
				req.getParameter("organization_name"), req.getParameter("contact_email"),
				null, null, null, req.getParameter("ou"));
		
		DataTableParameterObj dataTableParameters = new DataTableParameterObj(sEcho, iDisplayStart, 
				iDisplayLength, iSortCol_0, sSortDir_0, sSearch);
		
		AjaxListResponse resp = organizationService.getOrganizationAjaxListResponseForCaptivePortal(filter, dataTableParameters);
		log.info("|LicensesListOrganization()|NO ERRORCODE|"+LdapUtils.getDn(principal)+"|NO PARAMETER|List successfully.");
		log.debug("LicensesController | licenses/ajax_organization_list | exit");
		return resp;

	}

	
	@ResponseBody
	@RequestMapping(value = "licenses/ajax_cp_list" + SPRING_EXT, headers = "Accept=application/json")
	public AjaxListResponse ajax_cp_list(
			Model model, 
			String sEcho, 
			int iDisplayStart, 
			int iDisplayLength,
			int iSortCol_0,
			String sSortDir_0,
			String sSearch,
			HttpServletRequest req, 
			HttpServletResponse rep, 
			HttpSession ses,
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/ajax_cp_list | entry");
		log.debug("LicensesController | licenses/ajax_cp_list | organization_id: "+ req.getParameter("organization_id"));
		
		DataTableParameterObj dataTableParameters = new DataTableParameterObj(sEcho, iDisplayStart, 
				iDisplayLength, iSortCol_0, sSortDir_0, sSearch);
		
		Long organizationId = (long)-1;
		if(!StringUtil.isBlank(req.getParameter("organization_id"))) {
			organizationId = Long.valueOf(req.getParameter("organization_id"));
		}
		AjaxListResponse resp = captivePortalService.getCaptivePortalAjaxListResponse(organizationId, dataTableParameters);

		log.info("|licensesListCp()|NO ERRORCODE|"+LdapUtils.getDn(principal)+"|NO PARAMETER|List successfully.");
		log.debug("LicensesController | licenses/ajax_cp_list | exit");
		return resp;

	}
	
	@ResponseBody
	@RequestMapping(value = "licenses/cp_add" + SPRING_EXT, method = RequestMethod.POST)
	public  String licenses_cp_add_submit(
			Model model,
			HttpServletRequest req,
			Authentication principal
			)
	{
		log.debug("LicensesController | licenses/cp_add | POST | entry");
		String result = null;
		
		try {
			log.debug(LdapUtils.getDn(principal)+" is trying to add a new captive portal");
			
			result = captivePortalService.saveCaptivePortal(req, CREATE_CAPTIVE_PORTAL);
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesAddCp()|NO ERRORCODE|"+LdapUtils.getDn(principal)+"|New Captive Portal|Add failed.");
		} 
		log.debug("LicensesController | licenses/cp_add | POST | exit");
		return result;
		
	}

	@ResponseBody
	@RequestMapping(value = "licenses/cp_edit" + SPRING_EXT, method = RequestMethod.POST)
	public String licenses_cp_edit_submit(
			Model model,
			HttpServletRequest req,
			Authentication principal
			)
	{
		
		log.debug("LicensesController | licenses/cp_edit | POST | entry");
		String result = "false";
		
		try {
			
			result = captivePortalService.saveCaptivePortal(req, UPDATE_CAPTIVE_PORTAL);
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesEditCp()|NO ERRORCODE|"+LdapUtils.getDn(principal)+"|cp_id = "+req.getParameter("cp_id")+", organization_id = "+req.getParameter("organization_id")
	        		+ "|Edit failed.");
		}
		
		log.debug("LicensesController | licenses/cp_edit | POST | exit");
		return result;
		
	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/cp_delete" + SPRING_EXT, method = RequestMethod.POST)
	public boolean delete_captiveportal(
			Model model
			, @RequestParam("id") String idList
			, @RequestParam("special_code") String specialCodeList
			, Authentication principal
			)
	{
		
		log.debug("LicensesController | licenses/cp_delete | POST | entry");
		try {
			
			captivePortalService.batchDeleteCaptivePortal(idList, specialCodeList, LdapUtils.getDn(principal));
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesDeleteCp()|NO ERRORCODE|"+LdapUtils.getDn(principal)+"|cp_id list = "+ idList
	        		+ "|Delete failed.");
			log.debug("LicensesController | licenses/cp_delete | POST | exit");
			return false;
			
		}
		return true;
		
	}
	
	
	@RequestMapping(value = { "licenses/piwik_manage" + SPRING_EXT })
	public String piwik_manage(
			Model model, 
			Authentication principal
			) 
	{
		
		log.debug("LicensesController | licenses/piwik_manage | entry");
		
		log.debug("LicensesController | licenses/piwik_manage | exit");
		
		return goToPageJsp("piwik_manage");

	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/ajax_piwik_list" + SPRING_EXT, headers = "Accept=application/json")
	public AjaxListResponse ajax_piwik_list(
			Model model, 
			String sEcho, 
			int iDisplayStart, 
			int iDisplayLength,
			int iSortCol_0,
			String sSortDir_0,
			String sSearch,
			HttpServletRequest req, 
			HttpServletResponse rep, 
			HttpSession ses,
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/ajax_piwik_list | entry");
		
		DataTableParameterObj dataTableParameters = new DataTableParameterObj(sEcho, iDisplayStart, 
				iDisplayLength, iSortCol_0, sSortDir_0, sSearch);
		
		Long organizationId = (long)-1;
		if(!StringUtil.isBlank(req.getParameter("organization_id"))) {
			organizationId = Long.valueOf(req.getParameter("organization_id"));
		}
		
		AjaxListResponse resp = piwikSiteService.getPiwikSiteAjaxListResponse(organizationId, dataTableParameters);

		log.debug("LicensesController | licenses/ajax_piwik_list | exit");
		return resp;

	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/piwik_add" + SPRING_EXT, method = RequestMethod.POST)
	public  String organizaiton_piwik_add_submit(
			Model model,
			HttpServletRequest req,
			Authentication principal
			)
	{
		
		log.debug("LicensesController | licenses/piwik_add | POST | entry");
		
		try {
			log.debug(LdapUtils.getDn(principal)+" is trying to add a new piwik.");
			
			String result = piwikSiteService.savePiwikSite(req, LdapUtils.getDn(principal), CREATE_PIWIK_SITE);
			
			log.debug("LicensesController | licenses/piwik_edit | POST | result: "+result);
			log.debug("LicensesController | licenses/piwik_add | POST | exit");
			return "true";
				
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesAddPiwik()|"+StatusCode.CREATE_FAILED+"|"+LdapUtils.getDn(principal)+"|New Piwik|Catch an Exception, Add failed.");
			return "Catch an Exception, Add failed!";
		}
		
	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/piwik_edit" + SPRING_EXT, method = RequestMethod.POST)
	public String organization_piwik_edit_submit(
			Model model,
			HttpServletRequest req,
			Authentication principal
			)
	{
		
		log.debug("LicensesController | licenses/piwik_edit | POST | entry");
		
		try {
			
			String result = piwikSiteService.savePiwikSite(req, LdapUtils.getDn(principal), UPDATE_PIWIK_SITE);
			
			log.debug("LicensesController | licenses/piwik_edit | POST | result: "+result);
			log.debug("LicensesController | licenses/piwik_edit | POST | exit");
			return result;
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesEditPiwik()|"+StatusCode.GENERAL_EXCEPTION+"|"+LdapUtils.getDn(principal)+"|site_id = "+req.getParameter("site_id")
	        		+ "|Catch an Exception.");
			log.debug("LicensesController | licenses/piwik_edit | POST | exit");
			return "Catch an Exception";
		}
		
	}

	
	@ResponseBody
	@RequestMapping(value = "licenses/piwik_delete" + SPRING_EXT, method = RequestMethod.POST)
	public String delete_piwik(
			Model model
			, @RequestParam("site_id") String siteIdList
			, @RequestParam("piwik_site_id") String piwikSiteIdList
			, Authentication principal)
			
	{
		log.debug("LicensesController | licenses/piwik_delete | POST | entry");
		
		
		try {
			
			piwikSiteService.batchDeletePiwik(siteIdList, piwikSiteIdList, LdapUtils.getDn(principal));
			
		} catch (Exception e) {
			log.info(e,e);
			log.info("|licensesDeletePiwik()|"+StatusCode.GENERAL_EXCEPTION+"|"+LdapUtils.getDn(principal)+"|piwik_id list = "+ siteIdList
	        		+ "|Catch an Exception, delete failed.");
			log.debug("LicensesController | licenses/piwik_delete | POST | exit");
			return "Catch an Exception, delete failed.";
		}
		log.debug("LicensesController | licenses/piwik_delete | POST | exit");
		return "true";
	}

	
	@RequestMapping(value = { "licenses/quota_manage" + SPRING_EXT })
	public String quota_manage(
			Model model, 
			Authentication principal
			) 
	{
		
		log.debug("LicensesController | licenses/quota_manage | entry");
		log.debug("LicensesController | licenses/quota_manage | exit");
		
		return goToPageJsp("quota_manage");

	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/ajax_quota_list" + SPRING_EXT, headers = "Accept=application/json")
	public AjaxListResponse ajax_quota_list(
			String sEcho,
			int iDisplayStart, 
			int iDisplayLength,
			int iSortCol_0,
			String sSortDir_0,
			String sSearch,
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/ajax_quota_list | entry");

		OrganizationFilterObj filter = new OrganizationFilterObj(getCurrentLoginHierarchyLevel(LdapUtils.getOuWithDot(principal)),  
				null, null, null, null, getCurrentLoginOu(principal), null);
		
		DataTableParameterObj dataTableParameters = new DataTableParameterObj(sEcho, iDisplayStart, 
				iDisplayLength, iSortCol_0, sSortDir_0, sSearch);
		
		AjaxListResponse resp = licensesService.getLicensesAjaxListResponse(filter, dataTableParameters);
		
		log.info("|listOrganization()|"+StatusCode.READ_SUCCESS+"|"+LdapUtils.getDn(principal)+"|NO PARAMETER|List successfully.");
		log.debug("LicensesController | licenses/ajax_quota_list | exit");
		return resp;

	}
	
	
	@ResponseBody
	@RequestMapping(value = "licenses/ajax_edit_quota" + SPRING_EXT, headers = "Accept=application/json")
	public boolean ajax_edit_quota(
			HttpServletRequest req, 
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/ajax_edit_quota | entry");
		
		String currentLoginOu = getCurrentLoginOu(principal);
		String ou = req.getParameter("ou");
		String ap_quota = req.getParameter("ap_quota");
		String device_quota = req.getParameter("device_quota");
		
		log.debug("LicensesController | licenses/ajax_edit_quota | currentLoginOu: "+currentLoginOu);
		log.debug("LicensesController | licenses/ajax_edit_quota | subodinateOu: "+ou);
		log.debug("LicensesController | licenses/ajax_edit_quota | ap_quota: "+ap_quota);
		log.debug("LicensesController | licenses/ajax_edit_quota | device_quota: "+device_quota);
		
		try {
			licensesService.editQuota(ou, ap_quota, device_quota, currentLoginOu);
		} catch (Exception e) {
			log.info(e,e);
			return false;
		}
		
		log.debug("LicensesController | licenses/ajax_edit_quota | exit");
		return true;
		

	}

	
	@ResponseBody
	@RequestMapping(value = "licenses/get_quota_info_by_ou" + SPRING_EXT, headers = "Accept=application/json")
	public Map<String, Object> get_quota_info_by_ou(
			Authentication principal
			) 
	{

		log.debug("LicensesController | licenses/get_quota_info_by_ou | entry");
		
		Map<String, Object> resp = licensesService.getQuotaInfomationByOu(getCurrentLoginOu(principal));
		
		log.debug("LicensesController | licenses/get_quota_info_by_ou | exit");
		return resp;

	}
	

}
