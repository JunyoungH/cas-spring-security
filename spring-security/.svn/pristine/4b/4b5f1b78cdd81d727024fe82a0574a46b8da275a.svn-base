package com.techstudio.form.controller.am;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.HttpSessionRequiredException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.techstudio.common.EasyClient;
import com.techstudio.form.controller.BaseController;


@Controller
public class SocialLoginController extends BaseController
{
	private static final Logger log = Logger.getLogger(SocialLoginController.class);
	
	//TODO: Extract to config file
	private static final String APP_ID = "wxda549e2cac09b6e6";
	private static final String APP_SECRET = "afe27180f3a961781ea7c9e249f4a98c ";
	private static final String WECHAT_ACCESS_TOKEN_API = "https://api.wechat.com/sns/oauth2/access_token";
	
	@Override
	protected String getModuleFolder() {
		return "socialLogin/";
	}

	@ExceptionHandler(HttpSessionRequiredException.class)
	public String handleTimeout() {
		return getRedirectedLoginPath();
	}
	
	
	@ResponseBody
	@RequestMapping(value = "socialLogin/wechat/callback" + SPRING_EXT, method = RequestMethod.GET)
	public String verifySignature(
			HttpServletRequest req
			) {
		//TODO: check whether the HTTP request is from WeChat by verifying the signature
		/*The signature will be generated in the following way using the token (that you provided), timestamp and nonce.

		1. Sort the 3 values of token, timestamp and nonce alphabetically.
		2. Combine the 3 parameters into one string, encrypt it using SHA-1.
		3. Compare the SHA-1 digest string with the signature from the request. If they are the same, the access request is from WeChat.*/
		String echostr = req.getParameter("echostr");
		return echostr;

	}
	
	@ResponseBody
	@RequestMapping(value = "socialLogin/wechat/callback" + SPRING_EXT, method = RequestMethod.POST)
	public String HandleWebLogin(
			HttpServletRequest req
			) {
		log.debug("HandleWebLogin | socialLogin/wechat/callback | POST | entry");
		log.debug("HandleWebLogin | socialLogin/wechat/callback | code: " + req.getParameter("code"));
		log.debug("HandleWebLogin | socialLogin/wechat/callback | state: " + req.getParameter("state"));
		
		//TODO: check state to prevent from "CSRF" attack
		
		Client smallClient = new EasyClient().getClient();
		StringBuilder wechatAccessTokenAPIBuilder = new StringBuilder();
		wechatAccessTokenAPIBuilder.append(WECHAT_ACCESS_TOKEN_API+"?")
									.append("appid="+APP_ID)
									.append("&")
									.append("secret="+APP_SECRET)
									.append("&")
									.append("code="+req.getParameter("code"))
									.append("&")
									.append("grant_type=authorization_code");
		WebResource webResource = smallClient.resource(wechatAccessTokenAPIBuilder.toString());
		ClientResponse clientResponse = webResource.type(MediaType.TEXT_PLAIN).get(ClientResponse.class);
		String response = clientResponse.getEntity(String.class);
		
		log.debug("HandleWebLogin | socialLogin/wechat/callback | POST | exit");
		return response;

	}
	
}
	