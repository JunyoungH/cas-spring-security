package com.techstudio.form.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

//import org.apache.log4j.Logger;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.techstudio.service.am.OrganizationAliasServiceImpl;
import com.techstudio.util.PrincipalUtils;


@Controller
public class HomeController extends BaseController {

	private static final Logger log = LoggerFactory.getLogger(HomeController.class);

	protected static final String PARAM_USERNAME = "username";
	protected static final String PARAM_PASSWORD = "password";
	
	protected static final String HOMEFOLDER = "home/";

	@Value("${cas.server.url}")
	private String casServerUrl;
	
	@Value("${WEB_APP_ROOT}")
	private String webAppRoot;
	
	@Value("${module.root.dashboard}")
	private String MODULE_DASHBORAD_ROOT;
	
	@Autowired
	private OrganizationAliasServiceImpl organizationAliasService;

	@Override
	protected String getModuleFolder() {
		return HOMEFOLDER;
	}
	
	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN', 'ROLE_WS_LOGIN')")
	@RequestMapping(value = "index" + SPRING_EXT)
	public String home(
			Model model,
			HttpServletRequest req) {
		return goToPageJsp("index");
	}
	
	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN', 'ROLE_WS_LOGIN')")
	@RequestMapping(value = "leftnav" + SPRING_EXT)
	public String leftnav(
			Model model,
			HttpServletRequest req) {
		return goToPageJsp("leftnav");
	}
	
	
	@RequestMapping(value = "main" + SPRING_EXT)
	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN', 'ROLE_WS_LOGIN')")
	public String main(
			Model model,
			Authentication principal,
			HttpServletRequest req, HttpSession ses) {
		
		log.info("|main()|NO ERRORCODE|"+PrincipalUtils.getLoginUid(principal)+"|NO Para|Login WILAS AM CMS");
		String ou = PrincipalUtils.getOrganizationUnit(principal);
		String userCatergory = organizationAliasService.getUserCatergoryByHierarchyLevel(PrincipalUtils.getHierarchyLevelByOu(ou));
		
		req.getSession().setAttribute("Ou", ou);
		req.getSession().setAttribute("userCatergory", userCatergory);
		return redirect(".."+MODULE_DASHBORAD_ROOT);
	}

	
//	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN','ROLE_WS_LOGIN')")
	@RequestMapping(value = HOMEFOLDER + "logout" + SPRING_EXT)
	public String caslogout(Model model,HttpSession ses,Authentication principal) {
		log.info("|caslogout()|NO ERRORCODE|"+PrincipalUtils.getLoginUid(principal)+"|NO Para|Logout WILAS BM CMS");
		ses.invalidate();
		return redirect(casServerUrl+"/logout?clicklogout=1");
	}
	
	
	@RequestMapping(value = HOMEFOLDER + "userguide" + SPRING_EXT)
	public String userguide(Model model,HttpSession ses,Authentication principal) {
		
		log.info("|userguide()|NO ERRORCODE|"+PrincipalUtils.getLoginUid(principal)+"|NO Para|Access BM User Guide");
		
		return goToPageJsp("../userguide/am_userguide");
	}

	
	protected String getRedirectHome() {
		
		return SPRING_REDIRECT_PREFIX + "main" + SPRING_EXT;
	}
	
	
	@RequestMapping(value = HOMEFOLDER + "restartserver" + SPRING_EXT)
	@PreAuthorize("hasAnyRole('ROLE_WS_DEVELOPER')")
	public String restart_server(
			Authentication principal
			) {
		
		log.info("|restartserver()|NO ERRORCODE|"+PrincipalUtils.getLoginUid(principal)+"|NO Para|Restart Server");
		
//		RestartServerShellScript restartServerShellScript = new RestartServerShellScript();
//		restartServerShellScript.execute();
		
		return goToPageJsp("main");
	}
	
	
	@RequestMapping(value = HOMEFOLDER + "suspendAccount" + SPRING_EXT)
	public String suspendAccount() {

		return goToPageJsp("suspend_account");

	}
	
	
	@ResponseBody
	@RequestMapping(value = "getUserType" + SPRING_EXT, method = RequestMethod.GET)
	@PreAuthorize("hasAnyRole('ROLE_WS_ROOT_ADMIN', 'ROLE_WS_LOGIN')")
	public String getUserType(
			Authentication principal) {
		
		log.info("|getUserType()|NO ERRORCODE|"+PrincipalUtils.getLoginUid(principal)+"|NO Para|Get user type");
		
		String ou = PrincipalUtils.getOrganizationUnit(principal);
		String userType = organizationAliasService.getUserCatergoryByHierarchyLevel(PrincipalUtils.getHierarchyLevelByOu(ou));

		return userType;
	}

}
