/*package com.techstudio.service.am;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.core.util.MultivaluedMapImpl;
import com.techstudio.common.AjaxListResponse;
import com.techstudio.common.EasyClient;
import com.techstudio.common.StatusCode;
import com.techstudio.dao.am.AuthenticationTypeDao;
import com.techstudio.dao.am.CaptivePortalDao;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.model.am.CaptivePortalDTO;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.util.LongWrapUtils;
import com.techstudio.util.RandomStr;

@Service
public class CaptivePortalServiceImpl_12_05_2016 extends BaseService{
	
	private static final Logger log = Logger.getLogger(CaptivePortalServiceImpl_12_05_2016.class);
	
	private static final String CLOUND_SERVER = "CP Cloud";
	private static final String LITE_SERVER = "CP Lite";
	private static final String INVALID_SERVER = "Invalid Server";
	
	private static final int INT_CLOUND_SERVER = 1;
	private static final int INT_LITE_SERVER = 2;
	
	private static final String COLUMN_NAME_0 = "cpId";
	private static final String COLUMN_NAME_1 = "cpName";
	private static final String COLUMN_NAME_2 = "cpDescription";
	private static final String COLUMN_NAME_3 = "cpServer";
	private static final String COLUMN_NAME_4 = "authenticationTypeDTO_AuthTypeName";
	private static final String COLUMN_NAME_5 = "domainName";
	private static final String COLUMN_NAME_6 = "status";
	private static final String COLUMN_NAME_7 = "startdate";
	private static final String COLUMN_NAME_8 = "enddate";
	
	private static final String SORT_DIRECTION = "asc";
	
	@Value("${ROOT_ADMIN}")
	private String ROOT_ADMIN;
	
	@Autowired  
	private MessageSource messageSource;
	
	@Autowired  
	private CaptivePortalDao captivePortalDao;
	
	@Autowired
	private OrganizationDao organizationDao;
	
	@Autowired
	private AuthenticationTypeDao authenticationTypeDao;
	
	@Value("${cplite.gettoken.url}")
	private String CPLITE_GETTOKEN_URL;
	
	@Value("${wilascp.add.url}")
	private String WILAS_CP_ADD_URL;
	
	@Value("${cplite.add.url}")
	private String CPLITE_ADD_URL;
	
	@Value("${wilascp.delete.url}")
	private String WILAS_CP_DELETE_URL;
	
	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy' 'HH:mm:ss");
	
	
	@Transactional
	public AjaxListResponse getCaptivePortalAjaxListResponse(
			Long organizationId,
			DataTableParameterObj dataTableParameters) {
		
		log.debug("CaptivePortalServiceImpl | getCaptivePortalAjaxListResponse | entry");
		
		List<CaptivePortalDTO> searchResults = captivePortalDao.findByOrganizationDTO_OrganizationId(organizationId);
		Long totalRecords = (long)searchResults.size();
		
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		Page<CaptivePortalDTO> onePageSearchResults = captivePortalDao.findByOrganizationDTO_OrganizationId(organizationId, pageRequest);
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults);
		
		log.debug("CaptivePortalServiceImpl | getCaptivePortalAjaxListResponse | exit");
		return resp;
	}

	private Pageable setUpPageRequest(DataTableParameterObj dataTableParameters) {
		
		log.debug("CaptivePortalServiceImpl | setUpPageRequest | entry");
		
		String columnName = COLUMN_NAME_0;
		switch(dataTableParameters.getiSortCol_0()) {
			case 0: columnName=COLUMN_NAME_0;
					break;
			case 1: columnName=COLUMN_NAME_1;
					break;
			case 2: columnName=COLUMN_NAME_2;
					break;
			case 3: columnName=COLUMN_NAME_3;
					break;
			case 4: columnName=COLUMN_NAME_4;
					break;
			case 5: columnName=COLUMN_NAME_5;
					break;
			case 6: columnName=COLUMN_NAME_6;
					break;
			case 7: columnName=COLUMN_NAME_7;
					break;
			case 8: columnName=COLUMN_NAME_8;
					break;
			default: columnName=COLUMN_NAME_0;
					break;
		}
		
		int displayLength = dataTableParameters.getiDisplayLength();
		int pageIndex = dataTableParameters.getiDisplayStart()/displayLength;
		
		Direction direction = Sort.Direction.ASC;
		
		if(StringUtils.equals(dataTableParameters.getsSortDir_0(), SORT_DIRECTION)) {
			direction = Sort.Direction.ASC;
		}else {
			direction = Sort.Direction.DESC;
		}
		
		log.debug("CaptivePortalServiceImpl | setUpPageRequest | exit");
		return new PageRequest(pageIndex, displayLength, direction, columnName);
	}
	
	private AjaxListResponse setUpAjaxListResponse(
			String sEcho, Long totalRecords,
			Page<CaptivePortalDTO> onePageSearchResults) {
		
		log.debug("CaptivePortalServiceImpl | AjaxListResponse | entry");
		
		String statusActive = messageSource.getMessage("table.status.active", null, getCurrentLocale());
		String statusInactive = messageSource.getMessage("table.status.suspend", null, getCurrentLocale());
		
		AjaxListResponse resp = new AjaxListResponse();
		resp.setsEcho(sEcho);
		resp.setiTotalRecords(totalRecords);
		resp.setiTotalDisplayRecords(totalRecords);
		List<Map<String, Object>> aaList = new LinkedList<Map<String, Object>>();
		for (CaptivePortalDTO c : onePageSearchResults) {
			int cp_server_int = c.getCpServer();
	        String cp_server;
	        switch (cp_server_int) {
	            case 1:  cp_server = CLOUND_SERVER;
	                     break;
	            case 2:  cp_server = LITE_SERVER;
	                     break;
	            default: cp_server = INVALID_SERVER;
	                     break;
	        }
			Map<String, Object> m = new HashMap<String, Object>();
			m.put("0", c.getCpId());
			m.put("1", LongWrapUtils.LongtoWrap(c.getCpName()));
			m.put("2", LongWrapUtils.LongtoWrap(c.getCpDescription()));
			m.put("3", cp_server);
			m.put("4", LongWrapUtils.LongtoWrap(c.getAuthenticationTypeDTO().getAuthTypeName()));
			m.put("5", c.getDomainName());
			m.put("6", c.getStatus()==1? statusActive : statusInactive);
			m.put("7", simpleDateFormat.format(c.getStartdate()));
			m.put("8", simpleDateFormat.format(c.getEnddate()));
			m.put("9", c.getCpSpecialCode());
			m.put("DT_RowId", c.getCpId());
			aaList.add(m);
		}
	
		resp.setAaData(aaList);
		log.debug("CaptivePortalServiceImpl | AjaxListResponse | exit");
		return resp;
	}
	
	@Transactional
	public String checkDuplicateSpecialCode(String specialCode){
		
		log.debug("CaptivePortalServiceImpl | checkDuplicateSpecialCode | entry");
		List<CaptivePortalDTO> captivePortalList = captivePortalDao.findByCpSpecialCode(specialCode);
		if(captivePortalList.size()>0) {
			
			String updatedSpecialCode = checkDuplicateSpecialCode(RandomStr.randomStr());
			log.debug("CaptivePortalServiceImpl | checkDuplicateSpecialCode() | special_code = "+updatedSpecialCode);
			log.debug("CaptivePortalServiceImpl | checkDuplicateSpecialCode() | exit");
			return updatedSpecialCode;
			
		}else {
			log.debug("CaptivePortalServiceImpl | checkDuplicateSpecialCode() | special_code = "+specialCode);
			log.debug("CaptivePortalServiceImpl | checkDuplicateSpecialCode() | exit");
			return specialCode;
			
		}
		
	}
	
	@Transactional
	public String saveCaptivePortal(HttpServletRequest req, boolean isUpdate) throws Exception{
		
		String result = "false";
		CaptivePortalDTO captivePortalDTO;
		if(isUpdate) {
			captivePortalDTO = updateCaptivePortalDTO(req);
		}else {
			captivePortalDTO = setUpCaptivePortalDTO(req);
		}
		
		if(captivePortalDTO.getCpServer()==INT_CLOUND_SERVER) {
			result = saveCaptivePortalFromBackend(captivePortalDTO);
		}else if(captivePortalDTO.getCpServer()==INT_LITE_SERVER) {
			result = saveCpLiteFromBackend(captivePortalDTO);
		}
		log.debug("CaptivePortalServiceImpl | saveCaptivePortal() | Saved into cp side captiveportal. Result: "+result);
		
		captivePortalDao.save(captivePortalDTO);
		log.debug("CaptivePortalServiceImpl | saveCaptivePortal() | Saved into table am_captiveportal(Database)");
		return result;
	}
	
	private CaptivePortalDTO setUpCaptivePortalDTO(HttpServletRequest req)
			throws Exception {
		
		OrganizationDTO organizationDTO = organizationDao.findByOrganizationId(Long.valueOf(req.getParameter("organization_id")));
		int cp_server_int = Integer.valueOf(req.getParameter("cp_server"));
		String special_code = checkDuplicateSpecialCode(RandomStr.randomStr());
		Date startdate = simpleDateFormat.parse(req.getParameter("startdate"));
		Date enddate = simpleDateFormat.parse(req.getParameter("enddate"));
		
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | organization_ou: " + organizationDTO.getOu());
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | organization_id: " + req.getParameter("organization_id"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | cp_name: " + req.getParameter("cp_name"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | cloud_domain_name: " + req.getParameter("cloud_domain_name"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | lite_domain_name: " + req.getParameter("lite_domain_name"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | cp_server: " + cp_server_int);
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | status: " + req.getParameter("status"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | auth_type_id: " + req.getParameter("auth_type_id"));
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | special_code: " + special_code);
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | startdate: " + startdate);
		log.debug("CaptivePortalServiceImpl | setUpCaptivePortalDTO() | enddate: " + enddate);
		
		
		CaptivePortalDTO captivePortalDTO = new CaptivePortalDTO();
		 Set CaptivePortalDTO attributes 
		captivePortalDTO.setCpName(req.getParameter("cp_name"));
		captivePortalDTO.setCpDescription(req.getParameter("cp_description"));
		captivePortalDTO.setCpSpecialCode(special_code);
		captivePortalDTO.setCpServer(cp_server_int);
		
		if(cp_server_int==1) {
			captivePortalDTO.setDomainName(req.getParameter("cloud_domain_name"));
		}else if(cp_server_int==2) {
			captivePortalDTO.setDomainName(req.getParameter("lite_domain_name"));
		}
		
		captivePortalDTO.setStatus(Integer.valueOf(req.getParameter("status")));
		captivePortalDTO.setStartdate(startdate);
		captivePortalDTO.setEnddate(enddate);
		captivePortalDTO.setOu(organizationDTO.getOu());
		captivePortalDTO.setRemarks(req.getParameter("reamarks"));
		Set CaptivePortalDTO attributes 
		
		Set organizationDTO to CaptivePortalDTO
		captivePortalDTO.setOrganizationDTO(organizationDTO);
		Set organizationDTO to CaptivePortalDTO
		
		Set authenticationTypeDTO to captivePortalDTO
		captivePortalDTO.setAuthenticationTypeDTO(authenticationTypeDao.findByAuthTypeId(Long.valueOf(req.getParameter("auth_type_id"))));
		Set authenticationTypeDTO to captivePortalDTO
		return captivePortalDTO;
	}
	
	private CaptivePortalDTO updateCaptivePortalDTO(HttpServletRequest req) throws Exception{
		OrganizationDTO organizationDTO = organizationDao.findByOrganizationId(Long.valueOf(req.getParameter("organization_id")));
		log.debug("Trying to edit "+organizationDTO.getOu()+"'s captive portal which cp_id=" + req.getParameter("cp_id"));
		int cpServer = Integer.valueOf(req.getParameter("cp_server"));
		
		log.debug("LicensesController | licenses/cp_edit | POST | organization_id: " + req.getParameter("organization_id"));
		log.debug("LicensesController | licenses/cp_edit | POST | cp_id: " + req.getParameter("cp_id"));
		log.debug("LicensesController | licenses/cp_edit | POST | cp_name: " + req.getParameter("cp_name"));
		log.debug("LicensesController | licenses/cp_edit | POST | cloud_domain_name: " + req.getParameter("cloud_domain_name"));
		log.debug("LicensesController | licenses/cp_edit | POST | lite_domain_name: " + req.getParameter("lite_domain_name"));
		log.debug("LicensesController | licenses/cp_edit | POST | cp_description: " + req.getParameter("cp_description"));
		log.debug("LicensesController | licenses/cp_edit | POST | domain_name: " + req.getParameter("domain_name"));
		log.debug("LicensesController | licenses/cp_edit | POST | status: " + req.getParameter("status"));
		
		CaptivePortalDTO captivePortalDTO = captivePortalDao.findByCpId(Long.valueOf(req.getParameter("cp_id")));
		
		Set captive_portalDTO attributes 
		captivePortalDTO.setCpName(req.getParameter("cp_name"));
		captivePortalDTO.setCpDescription(req.getParameter("cp_description"));
		captivePortalDTO.setCpServer(cpServer);
		if(cpServer==1) {
			captivePortalDTO.setDomainName(req.getParameter("cloud_domain_name"));
		}else if(cpServer==2) {
			captivePortalDTO.setDomainName(req.getParameter("lite_domain_name"));
		}
		captivePortalDTO.setStatus(Integer.valueOf(req.getParameter("status")));
		captivePortalDTO.setRemarks(req.getParameter("reamarks"));
		Set captive_portalDTO attributes 
		return captivePortalDTO;
	}
	
	private String saveCaptivePortalFromBackend(CaptivePortalDTO captivePortalDTO) throws Exception
	{
		
		log.debug("CaptivePortalServiceImpl | saveCaptivePortalFromBackend | POST | entry");
		
		String saveCpPostUrl = WILAS_CP_ADD_URL+SPRING_EXT;      // (cp/captiveportal/add) Please config url in config file
		log.debug("CaptivePortalServiceImpl | saveCaptivePortalFromBackend | POST | saveCpPostUrl: " + saveCpPostUrl);
		
		MultivaluedMap<String, String> formData = setUpFormData(captivePortalDTO);
		
		String result = (String) httpBackendPost(saveCpPostUrl, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("CaptivePortalServiceImpl | saveCaptivePortalFromBackend | POST | exit");
		return result;

	}
	
	private String saveCpLiteFromBackend(CaptivePortalDTO captivePortalDTO) throws Exception
	{
		
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | entry");
		
		Client smallClient = new EasyClient().getClient();
		
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | GET | getToken URL: "+CPLITE_GETTOKEN_URL+SPRING_EXT);
		String token = (String) httpBackendGet(smallClient, CPLITE_GETTOKEN_URL+SPRING_EXT, MediaType.TEXT_HTML, String.class);
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | GET | Respond Token: "+token);
		
		MultivaluedMap<String, String> formData = setUpFormData(captivePortalDTO);
		formData.add("cptoken", token);
		
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | POST | addCpLitePost URL: " + CPLITE_ADD_URL+SPRING_EXT);
		String result = (String) httpBackendPost(CPLITE_ADD_URL+SPRING_EXT, formData, smallClient, MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | POST | Respond Result: "+result);
		
		log.debug("CaptivePortalServiceImpl | saveCpLiteFromBackend | exit");
		return result;

	}

	private MultivaluedMap<String, String> setUpFormData(
			CaptivePortalDTO captivePortalDTO) throws Exception{
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("cp_name", captivePortalDTO.getCpName());
		formData.add("cp_specialcode", captivePortalDTO.getCpSpecialCode());
		formData.add("ou", captivePortalDTO.getOu());
		formData.add("domain_name", captivePortalDTO.getDomainName());
		formData.add("a_mode", captivePortalDTO.getAuthenticationTypeDTO().getAuthTypeId().toString());
		formData.add("state", captivePortalDTO.getStatus().toString());
		 Hardcode 
		formData.add("ssid", "willas-wifi");
		 Hardcode 
		return formData;
	}
	
	public void batchDeleteCaptivePortal(String idList,
			String specialCodeList, String DN) throws Exception {
		
		String[] splitId = null;
		String[] splitSpecialCode = null;
		
		splitId = idList.split(",");
		splitSpecialCode = specialCodeList.split(",");
		
		for (int i = 0; i < splitId.length; i++) {
			
			String deleteResult = deleteCaptivePortalFromBackend(splitSpecialCode[i]);
			if(deleteResult.equals("true")) {
				
				log.info("|batchDeleteCaptivePortal()|"+StatusCode.DELETE_SUCCESS+"|"+ DN +"| special_code = "+splitSpecialCode[i]
		        		+ "|Delete Captive Portal from Cp module successful.");
				
				log.debug(DN+" is trying to delete captive portal from local DB which cp_id = " + splitId[i]);
				captivePortalDao.delete(Long.valueOf(splitId[i]));
				log.info("|batchDeleteCaptivePortal()|"+StatusCode.DELETE_SUCCESS+"|"+ DN +"|cp_id = " + splitId[i] + "|Delete from local DB successful.");
				log.debug("CaptivePortalServiceImpl | batchDeleteCaptivePortal() | exit");
				
			}else {
				log.info("|batchDeleteCaptivePortal()|"+StatusCode.DELETE_FAILED+"|"+ DN +"| special_code = "+splitSpecialCode[i]
		        		+ "|Delete Captive Portal from Cp module failed.");
			}
			
			
				
		}
	}
	
	private String deleteCaptivePortalFromBackend(
			String special_code
			) throws Exception 
	{
		
		log.debug("CaptivePortalServiceImpl | cp/captiveportal/remove | deleteCaptivePortal | POST | entry");
		log.debug("CaptivePortalServiceImpl | cp/captiveportal/remove | deleteCaptivePortal | POST | special_code: "+special_code);
		
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("cp_specialcode", special_code);
		
		log.debug("CaptivePortalServiceImpl | cp/captiveportal/remove | deleteCaptivePortal | POST | deleteCpPost: " + WILAS_CP_DELETE_URL+SPRING_EXT);
		String result = (String) httpBackendPost(WILAS_CP_DELETE_URL+SPRING_EXT, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("CaptivePortalServiceImpl | cp/captiveportal/remove | deleteCaptivePortal | POST | Respond Result: "+result);
		
		log.debug("CaptivePortalServiceImpl | cp/captiveportal/remove | deleteCaptivePortal | POST | exit");
		return result;

	}
	
}
*/