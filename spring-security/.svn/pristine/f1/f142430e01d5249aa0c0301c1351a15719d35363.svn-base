package com.techstudio.dao.am;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.jsoup.helper.StringUtil;
import org.springframework.data.jpa.domain.Specification;

import com.techstudio.model.am.AccountDTO;
import com.techstudio.model.am.AccountDTO_;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.OrganizationDTO_;
import com.techstudio.model.am.filter.AccountFilterObj;

public class AccountSpecifications {
	
//	@Value("${ROOT_ADMIN}")
//	private static String ROOT_ADMIN;
//	private static String ROOT_ADMIN = ConnConfig.getRootAdmin();
	
	private static final int ACCOUNT_DELETE_FLAG_DELETED = 1;
	private static final int ACCOUNT_STATUS_ALL = 10;
	
	private AccountSpecifications() {
		
	}
	
	public static Specification<AccountDTO> getAccountListByFilter(
			final int viewLayers, 
			final AccountFilterObj filter,
			final long accountId) {
        return new Specification<AccountDTO>() {
        	
			@Override
			public Predicate toPredicate(Root<AccountDTO> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				
				Join<AccountDTO, OrganizationDTO> accOrgJoinTable = root.join( AccountDTO_.organizationDTO );
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.between(accOrgJoinTable.<Integer>get(OrganizationDTO_.hierarchyLevel), filter.getLoginHierarchyLevel(), filter.getLoginHierarchyLevel()+viewLayers));
				predicates.add(cb.notEqual(root.<Integer>get(AccountDTO_.deleteFlag), ACCOUNT_DELETE_FLAG_DELETED));
				predicates.add(cb.notEqual(root.<Long>get(AccountDTO_.accountId), accountId));
				
				if(!StringUtil.isBlank(filter.getFirstName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(AccountDTO_.firstName)), getContainsLikePattern(filter.getFirstName())));
				}
				
				if(!StringUtil.isBlank(filter.getLastName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(AccountDTO_.lastName)), getContainsLikePattern(filter.getLastName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactEmail())) {
					predicates.add(cb.like(cb.lower(root.<String>get(AccountDTO_.loginUid)), getContainsLikePattern(filter.getContactEmail())));
				}
				
				System.out.println("filter.getStatus(): "+filter.getStatus());
				if(filter.getStatus()!=null && Integer.valueOf(filter.getStatus())!=ACCOUNT_STATUS_ALL) {
					predicates.add(cb.equal(root.<Integer>get(AccountDTO_.status), Integer.valueOf(filter.getStatus())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchHierarchyLevel())&&!filter.getSearchHierarchyLevel().equals("all")) {
					predicates.add(cb.equal(accOrgJoinTable.<Integer>get(OrganizationDTO_.hierarchyLevel), Integer.valueOf(filter.getSearchHierarchyLevel())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchOu())&&!filter.getSearchOu().equals("all")) {
					predicates.add(
							cb.or(
									cb.equal(cb.lower(root.<String>get(AccountDTO_.ou)), filter.getSearchOu()), 
									cb.like(cb.lower(root.<String>get(AccountDTO_.ou)), filter.getSearchOu()+".%")
								 )
									   );
				}
				
				/*if it is not ROOT_ADMIN_OU*/
				if(!StringUtil.isBlank(filter.getLoginOu())) {
					
					predicates.add(
						cb.or(
								cb.equal(cb.lower(root.<String>get(AccountDTO_.ou)), filter.getLoginOu()),
								cb.like(cb.lower(root.<String>get(AccountDTO_.ou)), filter.getLoginOu()+".%")
							 )
								   );
					
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
				
			}

        };
    }
	
	private static String getContainsLikePattern(String searchTerm) {
        	
        return "%" + searchTerm.toLowerCase() + "%";
            
    }
	
}
