package com.techstudio.service.am;

import java.util.Arrays;
import java.util.Locale;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.context.ServletContextAware;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.springframework.web.servlet.support.RequestContextUtils;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.core.util.MultivaluedMapImpl;
import com.techstudio.common.EasyClient;
import com.techstudio.common.StatusCode;
import com.techstudio.common.am.PiwikAPIResponse;
import com.techstudio.dao.am.CaptivePortalDao;
import com.techstudio.dao.am.PiwikSiteDao;
import com.techstudio.util.PrincipalUtils;

@Service
public class BaseService implements ServletContextAware{

	protected static final Logger log = Logger.getLogger(BaseService.class);
	
	public static final String SPRING_EXT = ".wilas";
	
	/*================Change "VIEW_LAYERS" and "MANIPULATE_LAYER" to get from config file===================================*/
	protected static final int VIEW_LAYERS = 2;
	protected static final int MANIPULATE_LAYER = 1;
	/*================Change "VIEW_LAYERS" and "MANIPULATE_LAYER" to get from config file===================================*/
	
	protected static final String SORT_DIRECTION = "asc";
	protected static final String ROOT_ADMIN_OU = null;
	
	@Autowired
	private CaptivePortalDao captivePortalDao;
	
	@Autowired
	private PiwikSiteDao piwikSiteDao;
	
	@Value("${wilascp.delete.url}")
	private String WILAS_CP_DELETE_URL;
	
	@Value("${wilaspiwik.api.url}")
	private String WILAS_PIWIK_API_URL;
	
	@Value("${wilascp.piwik.delete.url}")
	private String WILAS_CP_PIWIK_DELETE_URL;
	
	@Value("${token.auth}")
	private String TOKEN_AUTH;
	
	protected ServletContext servletContext;  
	@Override
	public void setServletContext(ServletContext servletContext) {
		this.servletContext = servletContext;
	}
	
	public HttpServletRequest getCurrentRequest(){
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		return request;
	}
	public String getCurrentUrl(){
		HttpServletRequest request = getCurrentRequest();
		return request.getRequestURL().toString();
	}
	
	public String getCurrentQueryString(){
		HttpServletRequest request = getCurrentRequest();
		return request.getQueryString();
	}
	
	public Authentication getCurrentPrincipal(){
		Authentication principal = SecurityContextHolder.getContext().getAuthentication(); 
		return principal;
	}
	
	public String getCurrentOu(){
		Authentication principal = getCurrentPrincipal();
		String ou = PrincipalUtils.getOrganizationUnit(principal);
		return ou;
	}
	
	public String getLogPrefix(int statusCode,String uid){
		return statusCode+"|"+uid+"|";
	}
	
	public String getCurrentUrlWithQueryString(){
		HttpServletRequest request = getCurrentRequest();
		return request.getRequestURL().toString() + "?" + request.getQueryString();
	}
	
	public Locale getCurrentLocale(){
		HttpServletRequest request = getCurrentRequest();
		Locale locale = RequestContextUtils.getLocaleResolver(request).resolveLocale(request);
		return locale;
	}
	public WebApplicationContext getCurrentWebAppContext(){
		WebApplicationContext applicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);
		return applicationContext;
	}
	/**
	 * getMessage from i18n message config<br/>
	 * using current locale
	 * @param key// e.g. menu.bi
	 * @return value// e.g. "Analytics"
	 */
	public String getSpringMessage(String key){
		Locale locale = getCurrentLocale();
		WebApplicationContext applicationContext = getCurrentWebAppContext();
		String value = key;// if no value return key
		try{
			value = applicationContext.getMessage(key,null, null, locale);
		}catch(Exception e){
			
		}
		return value;
	}
	
	public static String showOuFromCurrentHierarchy(int curruntLoginHierarchy, String ou){
		if(ou==null) {
			return null;
		}
		String[] ouSplit = ou.split("\\.");

		StringBuilder sb = new StringBuilder();
		
		ouSplit = Arrays.copyOfRange(ouSplit, curruntLoginHierarchy==0 ? 0 : curruntLoginHierarchy-1, ouSplit.length);


		for(int i=0;i<ouSplit.length;i++){

		if(i==ouSplit.length-1){
			sb.append(ouSplit[i]);
		}else{
			sb.append(ouSplit[i]).append(".");
		}

		}

		return sb.toString(); 
			
		
	}

	@SuppressWarnings("unchecked")
	protected <T> Object httpBackendGet(Client smallClient, String url, String mediaType, T t) throws Exception{
		
		//smallClient.addFilter(new HTTPBasicAuthFilter(User, Password));
		WebResource webResource = smallClient.resource(url);
		ClientResponse clientResponse = webResource.type(mediaType).get(ClientResponse.class);
		Object response = clientResponse.getEntity((Class<T>) t);
		log.debug("BaseService | httpBackendGet() | GET | Http Backend GET Respond Result: " + response);
		return response;
	}
	
	
	@SuppressWarnings("unchecked")
	protected <T> Object httpBackendPost(String url,
			MultivaluedMap<String, String> formData,
			Client smallClient, String mediaType, T t) throws Exception{
		
		//smallClient.addFilter(new HTTPBasicAuthFilter(User, Password));
		WebResource webResource = smallClient.resource(url);
		ClientResponse clientResponse;
		if(formData == null) {
			clientResponse = webResource.type(mediaType).post(ClientResponse.class);
		}else {
			clientResponse = webResource.type(mediaType).post(ClientResponse.class, formData);
		}
		Object response = clientResponse.getEntity((Class<T>) t);
		log.debug("BaseService | httpBackendPost() | POST | Http Backend POST Respond Result: " + response);
		return response;
	}
	
	protected void deleteSingleCaptivePortalFromLocalDBAndCpModule(String dn,
			Long cpId, String specialcode) throws Exception {
		String deleteResult = deleteCaptivePortalFromBackend(specialcode);
		if(deleteResult.equals("true")) {
			
			log.info("|deleteSingleCaptivePortalFromLocalDBAndCpModule()|"+StatusCode.DELETE_SUCCESS+"|"+ dn +"| special_code = "+specialcode
		    		+ "|Delete Captive Portal from Cp module successful.");
			
			log.debug(dn+" is trying to delete captive portal from local DB which cp_id = " + cpId);
			captivePortalDao.delete(cpId);
			log.info("|deleteSingleCaptivePortalFromLocalDBAndCpModule()|"+StatusCode.DELETE_SUCCESS+"|"+ dn +"|cp_id = " + cpId + "|Delete from local DB successful.");
			log.debug("BaseService | deleteSingleCaptivePortalFromLocalDBAndCpModule() | exit");
			
		}else {
			log.info("|deleteSingleCaptivePortalFromLocalDBAndCpModule()|"+StatusCode.DELETE_FAILED+"|"+ dn +"| special_code = "+specialcode
		    		+ "|Delete Captive Portal from Cp module failed.");
		}
	}
	
	protected String deleteCaptivePortalFromBackend(
			String special_code
			) throws Exception 
	{
		
		log.debug("BaseService | deleteCaptivePortalFromBackend() | POST | entry");
		log.debug("BaseService | deleteCaptivePortalFromBackend() | POST | special_code: "+special_code);
		
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("cp_specialcode", special_code);
		
		log.debug("BaseService | deleteCaptivePortalFromBackend() | POST | deleteCpPost: " + WILAS_CP_DELETE_URL+SPRING_EXT);
		String result = (String) httpBackendPost(WILAS_CP_DELETE_URL+SPRING_EXT, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("BaseService | deleteCaptivePortalFromBackend() | POST | Respond Result: "+result);
		
		log.debug("BaseService | deleteCaptivePortalFromBackend() | POST | exit");
		return result;

	}
	
	
	//TODO Convert if else statements inside the for loop to "Responsebility Chain" pattern
	protected void deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite(String DN,
			String siteId, String piwikSiteId)
			throws Exception {
		
		String checkCpPiwikResult = "false";
		String checkPiwikApiResult = "error";
		
		log.debug(DN +" is trying to delete a piwik which site_id = " + siteId);
		
		checkPiwikApiResult = deletePiwikViaApi(piwikSiteId);
		if(checkPiwikApiResult.equals("success")) {
			
			log.info("|deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite()|"+StatusCode.DELETE_SUCCESS+"|"+ DN +"|piwik_site_id = "+piwikSiteId
		    		+ "|Delete from piwik API successful.");
			checkCpPiwikResult = deletePiwikFromCpModule(siteId);
			
			if(checkCpPiwikResult.equals("true")) {
				log.info("|deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite()|"+StatusCode.DELETE_SUCCESS+"|"+ DN +"|site_id = "+siteId
		        		+ "|Delete Piwik from Cp module successful.");
				
				piwikSiteDao.delete(Long.valueOf(siteId));
				log.info("|deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite()|"+StatusCode.DELETE_SUCCESS+"|"+ DN +"|site_id = "+siteId
		        		+ "|Delete from local DB successful.");
			}else {
				log.info("|deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite()|"+StatusCode.DELETE_FAILED+"|"+ DN +"|site_id = "+siteId
		        		+ "|Delete Piwik from Cp module failed.");
				log.debug("BaseService | deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite() | POST | exit");
			}
			
		}else {
			
			log.info("|batchDeletePiwik()|"+StatusCode.DELETE_FAILED+"|"+ DN +"|site_id = "+siteId
		    		+ "|Call Cp Delete API failed.");
			log.debug("BaseService | batchDeletePiwik() | POST | exit");
			
		}
	}
	
	
	private String deletePiwikViaApi(
			String piwik_site_id
			) throws Exception 
	{
		
		log.debug("BaseService | deletePiwikViaApi() | GET | entry");
		
		log.debug("BaseService | deletePiwikViaApi() | GET | piwik_site_id: "+piwik_site_id);
		
		String deletePiwikApi = WILAS_PIWIK_API_URL;      // Please config url in config file
		
		StringBuilder piwik_api_sb = new StringBuilder();
		piwik_api_sb.append(deletePiwikApi+"?");
		piwik_api_sb.append("module=API");
		piwik_api_sb.append("&method=SitesManager.deleteSite");
		piwik_api_sb.append("&idSite=").append(piwik_site_id);
		piwik_api_sb.append("&format=JSON");
		piwik_api_sb.append("&token_auth=").append(TOKEN_AUTH);
		String piwik_delete_api = piwik_api_sb.toString();
		
		log.debug("BaseService | deletePiwikViaApi() | GET | deletePiwikApi: " + piwik_delete_api);
		
		PiwikAPIResponse piwikAPIResponse = (PiwikAPIResponse) httpBackendPost(piwik_delete_api, null, new EasyClient().getClient(), MediaType.APPLICATION_JSON, PiwikAPIResponse.class);
		
		log.debug("BaseService | deletePiwikViaApi() | GET | result: "+piwikAPIResponse.getResult()+", message: "+piwikAPIResponse.getMessage());
		log.debug("BaseService | deletePiwikViaApi() | GET | exit");
		return piwikAPIResponse.getResult();

	}
	
	
	private String deletePiwikFromCpModule( String site_id ) throws Exception 
	{
		
		log.debug("BaseService | deletePiwikFromCpModule() | POST | entry");
		log.debug("BaseService | deletePiwikFromCpModule() | POST | site_id: "+site_id);
		
		String deleteCpPiwikPost = WILAS_CP_PIWIK_DELETE_URL+SPRING_EXT;    // Please config url in config file
		
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("id", site_id);
		
		log.debug("BaseService | deletePiwikFromCpModule() | POST | deleteCpPiwikPost: " + deleteCpPiwikPost);
		
		String result = (String) httpBackendPost(deleteCpPiwikPost, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		
		log.debug("BaseService | deletePiwikFromCpModule() | POST | Delete result from CP side: " + result);
		log.debug("BaseService | deletePiwikFromCpModule() | POST | exit");
		return result;

	}

}