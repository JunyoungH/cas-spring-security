package com.techstudio.dao.am;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.jsoup.helper.StringUtil;
import org.springframework.data.jpa.domain.Specification;

import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.OrganizationDTO_;
import com.techstudio.model.am.filter.OrganizationFilterObj;

public class OrganizationSpecifications {
	
//	@Value("${ROOT_ADMIN}")
//	private static String ROOT_ADMIN;
	
	private static final int ORGANIZATION_DELETE_FLAG_DELETED = 1;
	private static final int ORGANIZATION_STATUS_ALL = 10;
	private static final Long ROOT_ADMIN_OU = (long)0;
	
	private OrganizationSpecifications() {
		
	}
	
	public static Specification<OrganizationDTO> getOrganizationListByFilter(final int viewLayers, final OrganizationFilterObj filter) {
        return new Specification<OrganizationDTO>() {
        	
			@Override
			public Predicate toPredicate(Root<OrganizationDTO> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				
				List<Predicate> predicates = new ArrayList<Predicate>();
						
				predicates.add(cb.between(root.<Integer>get(OrganizationDTO_.hierarchyLevel), filter.getLoginHierarchyLevel(), filter.getLoginHierarchyLevel()+viewLayers));
				predicates.add(cb.notEqual(root.<Integer>get(OrganizationDTO_.deleteFlag), ORGANIZATION_DELETE_FLAG_DELETED));
				
				if(!StringUtil.isBlank(filter.getCompanyName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.companyName)), getContainsLikePattern(filter.getCompanyName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactEmail())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactEmail)), getContainsLikePattern(filter.getContactEmail())));
				}
				
				if(!StringUtil.isBlank(filter.getContactName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactName)), getContainsLikePattern(filter.getContactName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactNumber())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactMobile)), getContainsLikePattern(filter.getContactNumber())));
				}
				System.out.println("filter.getStatus(): "+filter.getStatus());
				if(filter.getStatus()!=null && Integer.valueOf(filter.getStatus())!=ORGANIZATION_STATUS_ALL) {
					predicates.add(cb.equal(root.<Integer>get(OrganizationDTO_.status), Integer.valueOf(filter.getStatus())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchHierarchyLevel())&&!filter.getSearchHierarchyLevel().equals("all")) {
					predicates.add(cb.equal(root.<Integer>get(OrganizationDTO_.hierarchyLevel), Integer.valueOf(filter.getSearchHierarchyLevel())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchOu())&&!filter.getSearchOu().equals("all")) {
					predicates.add(
						cb.or(
								cb.equal(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getSearchOu()), 
								cb.like(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getSearchOu()+".%")
							 )
								 );
				}
				
				/*if it is not ROOT_ADMIN_OU*/
				if(!StringUtil.isBlank(filter.getLoginOu())) {
					predicates.add(
//							cb.or(
//									cb.equal(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getLoginOu()), 
									cb.like(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getLoginOu()+".%")
//								 )
									 );
				}else {
					
					predicates.add(cb.notEqual(root.<Long>get(OrganizationDTO_.organizationId), ROOT_ADMIN_OU));
					
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
				
			}

        };
    }
	
	public static Specification<OrganizationDTO> getOrganizationQuotaListByFilter(final int viewLayers, final OrganizationFilterObj filter) {
        return new Specification<OrganizationDTO>() {
        	
			@Override
			public Predicate toPredicate(Root<OrganizationDTO> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				
				List<Predicate> predicates = new ArrayList<Predicate>();
						
				predicates.add(cb.between(root.<Integer>get(OrganizationDTO_.hierarchyLevel), filter.getLoginHierarchyLevel()+1, filter.getLoginHierarchyLevel()+viewLayers));
				predicates.add(cb.notEqual(root.<Integer>get(OrganizationDTO_.deleteFlag), ORGANIZATION_DELETE_FLAG_DELETED));
				
				if(!StringUtil.isBlank(filter.getCompanyName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.companyName)), getContainsLikePattern(filter.getCompanyName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactEmail())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactEmail)), getContainsLikePattern(filter.getContactEmail())));
				}
				
				if(!StringUtil.isBlank(filter.getContactName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactName)), getContainsLikePattern(filter.getContactName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactNumber())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactDid)), getContainsLikePattern(filter.getContactNumber())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchHierarchyLevel())&&!filter.getSearchHierarchyLevel().equals("all")) {
					predicates.add(cb.equal(root.<Integer>get(OrganizationDTO_.hierarchyLevel), Integer.valueOf(filter.getSearchHierarchyLevel())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchOu())&&!filter.getSearchOu().equals("all")) {
					predicates.add(
						cb.or(
								cb.equal(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getSearchOu()), 
								cb.like(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getSearchOu()+".%")
							 )
								 );
				}
				
				if(!StringUtil.isBlank(filter.getLoginOu())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.ou)), filter.getLoginOu()+".%"));
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
				
			}

        };
    }
	
	public static Specification<OrganizationDTO> getClientOrganizationListByFilter(final int clientHierarchyLevel, final OrganizationFilterObj filter) {
        return new Specification<OrganizationDTO>() {
        	
			@Override
			public Predicate toPredicate(Root<OrganizationDTO> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				
				List<Predicate> predicates = new ArrayList<Predicate>();
						
				predicates.add(cb.equal(root.<Integer>get(OrganizationDTO_.hierarchyLevel), clientHierarchyLevel));
				predicates.add(cb.notEqual(root.<Integer>get(OrganizationDTO_.deleteFlag), ORGANIZATION_DELETE_FLAG_DELETED));
				
				if(!StringUtil.isBlank(filter.getCompanyName())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.companyName)), getContainsLikePattern(filter.getCompanyName())));
				}
				
				if(!StringUtil.isBlank(filter.getContactEmail())) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.contactEmail)), getContainsLikePattern(filter.getContactEmail())));
				}
				
				if(!StringUtil.isBlank(filter.getSearchOu())&&!filter.getSearchOu().equals("all")) {
					predicates.add(cb.like(cb.lower(root.<String>get(OrganizationDTO_.ou)), getContainsLikePattern(filter.getSearchOu())));
				}
				
				return cb.and(predicates.toArray(new Predicate[] {}));
				
			}

        };
    }
	
	private static String getContainsLikePattern(String searchTerm) {
        	
        return "%" + searchTerm.toLowerCase() + "%";
            
    }
	
}
