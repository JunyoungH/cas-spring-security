package com.techstudio.service.am;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.jsoup.helper.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sun.jersey.core.util.MultivaluedMapImpl;
import com.techstudio.common.AjaxListResponse;
import com.techstudio.common.EasyClient;
import com.techstudio.common.LocalConstant;
import com.techstudio.dao.am.AccountDao;
import com.techstudio.dao.am.CaptivePortalDao;
import com.techstudio.dao.am.OrganizationAliasDao;
import com.techstudio.dao.am.OrganizationDao;
import com.techstudio.dao.am.OrganizationOrganizationAliasDao;
import com.techstudio.dao.am.OrganizationRoleDao;
import com.techstudio.dao.am.OrganizationSpecifications;
import com.techstudio.dao.am.PiwikSiteDao;
import com.techstudio.dao.am.RoleDao;
import com.techstudio.model.am.AccountDTO;
import com.techstudio.model.am.CaptivePortalDTO;
import com.techstudio.model.am.OrganizationDTO;
import com.techstudio.model.am.OrganizationOrganizationAliasDTO;
import com.techstudio.model.am.OrganizationRoleDTO;
import com.techstudio.model.am.PiwikSiteDTO;
import com.techstudio.model.am.filter.DataTableParameterObj;
import com.techstudio.model.am.filter.OrganizationFilterObj;
import com.techstudio.util.PrincipalUtils;
import com.techstudio.util.LongWrapUtils;

@Service
public class OrganizationServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(OrganizationServiceImpl.class);
	
	private static final int VIEW_CLIENT_HIERARCHY_LEVEL = 4;
	private static final int CLIENT_HIERARCHY_LEVEL = 4;
//	private static final String ROOT_ADMIN_OU = null;
	
	private static final String ORGANIZATION_COLUMN_0 = "organizationId";
	private static final String ORGANIZATION_COLUMN_1 = "companyName";
	private static final String ORGANIZATION_COLUMN_2 = "contactEmail";
	private static final String ORGANIZATION_COLUMN_3 = "contactMobile";
	private static final String ORGANIZATION_COLUMN_4 = "contactName";
	private static final String ORGANIZATION_COLUMN_5 = "techContactEmail";
	private static final String ORGANIZATION_COLUMN_6 = "status";
	private static final String ORGANIZATION_COLUMN_7 = "ou";
	private static final String ORGANIZATION_COLUMN_8 = "hierarchyLevel";
	private static final String ORGANIZATION_COLUMN_9 = "hierarchyLevel";
	
	private static final int ORGANIZATION_DELETE_FLAG_NORMAL = 0;
	private static final int ORGANIZATION_DELETE_FLAG_DELETED = 1;
	
	private static final long CLIENT = 4;
	private static final long DEPARTMENT = 5;
	private static final long REPORT_REVIEWER_ROLE = 7;
	
	private static final String SELECT_ALL_OPTIONS = "0";
	
	@Value("${ROOT_ADMIN}")
	private String ROOT_ADMIN;
	
	@Value("${wilas.label}")
	private String WILAS_LABEL;
	
	@Value("${wilascp.initcp.url}")
	private String WILAS_CP_INIT_CP_URL;
	
	@Autowired  
	private MessageSource messageSource;
	
	@Autowired
	private OrganizationDao organizationDao;
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private OrganizationOrganizationAliasDao organizationOrganizationAliasDao;
	
	@Autowired
	private OrganizationAliasDao organizationAliasDao;
	
	@Autowired
	private OrganizationRoleDao organizationRoleDao;
	
	@Autowired
	private AccountDao accountDao;
	
	@Autowired
	private PiwikSiteDao piwikSiteDao;
	
	@Autowired
	private CaptivePortalDao captivePortalDao;
	
	
	/* (non-Javadoc)
	 * @see com.techstudio.service.AccountServiceImpl#createAccount(com.techstudio.model.am.AccountDTO)
	 */
	@Transactional
	public OrganizationDTO saveOrganization(OrganizationDTO organization) {
		
		log.debug("OrganizationServiceImpl | saveOrganization | entry");
		
		OrganizationDTO result = organizationDao.save(organization);
		
		log.debug("OrganizationServiceImpl | saveOrganization | exit");
		
		return result;
		
	}
	
	@Transactional
	public AjaxListResponse getOrganizationAjaxListResponseForCaptivePortal(
			OrganizationFilterObj filter,
			DataTableParameterObj dataTableParameters) {
		
		log.debug("OrganizationServiceImpl | getOrganizationAjaxListResponseForCaptivePortal | entry");
		
		Specification<OrganizationDTO> searchSpec = OrganizationSpecifications.getClientOrganizationListByFilter(VIEW_CLIENT_HIERARCHY_LEVEL, filter);
        List<OrganizationDTO> searchResults = organizationDao.findAll(searchSpec);
		Long totalRecords = (long)searchResults.size();
		
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		Page<OrganizationDTO> onePageSearchResults = organizationDao.findAll(searchSpec, pageRequest);
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults, filter.getLoginHierarchyLevel(), "false", "false", "false");
		
		log.debug("OrganizationServiceImpl | getOrganizationAjaxListResponseForCaptivePortal | exit");
		return resp;
	}
	
	@Transactional
	public AjaxListResponse getOrganizationAjaxListResponse(
			OrganizationFilterObj filter,
			DataTableParameterObj dataTableParameters,
			String isAdmin,
			String isReadOnly,
			String isManage
			) {
		
		log.debug("OrganizationServiceImpl | getOrganizationAjaxListResponse | entry");
		
		Specification<OrganizationDTO> searchSpec = OrganizationSpecifications.getOrganizationListByFilter(VIEW_LAYERS, filter);
        List<OrganizationDTO> searchResults = organizationDao.findAll(searchSpec);
		Long totalRecords = (long)searchResults.size();
		
		Pageable pageRequest =  setUpPageRequest(dataTableParameters);
		Page<OrganizationDTO> onePageSearchResults = organizationDao.findAll(searchSpec, pageRequest);
		
		AjaxListResponse resp = setUpAjaxListResponse(dataTableParameters.getsEcho(), totalRecords, onePageSearchResults, filter.getLoginHierarchyLevel(), isAdmin, isReadOnly, isManage);
		
		log.debug("OrganizationServiceImpl | getOrganizationAjaxListResponse | exit");
		return resp;
	}

	private Pageable setUpPageRequest(DataTableParameterObj dataTableParameters) {
		
		log.debug("OrganizationServiceImpl | setUpPageRequest | entry");
		
		String columnName = ORGANIZATION_COLUMN_0;
		switch(dataTableParameters.getiSortCol_0()) {
			case 0: columnName=ORGANIZATION_COLUMN_0;
					break;
			case 1: columnName=ORGANIZATION_COLUMN_1;
					break;
			case 2: columnName=ORGANIZATION_COLUMN_2;
					break;
			case 3: columnName=ORGANIZATION_COLUMN_3;
					break;
			case 4: columnName=ORGANIZATION_COLUMN_4;
					break;
			case 5: columnName=ORGANIZATION_COLUMN_5;
					break;
			case 6: columnName=ORGANIZATION_COLUMN_6;
					break;
			case 7: columnName=ORGANIZATION_COLUMN_7;
					break;
			case 8: columnName=ORGANIZATION_COLUMN_8;
					break;
			case 9: columnName=ORGANIZATION_COLUMN_9;
					break;
			default: columnName=ORGANIZATION_COLUMN_0;
					break;
		}
		
		int displayLength = dataTableParameters.getiDisplayLength();
		int pageIndex = dataTableParameters.getiDisplayStart()/displayLength;
		
		Direction direction = Sort.Direction.ASC;
		
		if(StringUtils.equals(dataTableParameters.getsSortDir_0(), SORT_DIRECTION)) {
			direction = Sort.Direction.ASC;
		}else {
			direction = Sort.Direction.DESC;
		}
		
		log.debug("OrganizationServiceImpl | setUpPageRequest | exit");
		return new PageRequest(pageIndex, displayLength, direction, columnName);
	}
	
	private AjaxListResponse setUpAjaxListResponse(
			String sEcho, Long totalRecords,
			Page<OrganizationDTO> onePageSearchResults,
			int currentLoginHierarchyLevel,
			String isAdmin,
			String isReadOnly,
			String isManage
			) {
		
		log.debug("OrganizationServiceImpl | AjaxListResponse | entry");
		
		String statusActive = "<span style='color:#00ff00'>" + messageSource.getMessage("table.status.active", null, getCurrentLocale()) + "</span>";
		String statusInactive = "<span style='color:#ff0000'>" + messageSource.getMessage("table.status.suspended", null, getCurrentLocale())+ "</span>";
		
		AjaxListResponse resp = new AjaxListResponse();
		resp.setsEcho(sEcho);
		resp.setiTotalRecords(totalRecords);
		resp.setiTotalDisplayRecords(totalRecords);
		List<Map<String, Object>> aaList = new LinkedList<Map<String, Object>>();
		for (OrganizationDTO o : onePageSearchResults) {
			Map<String, Object> m = new HashMap<String, Object>();
			m.put("0", o.getOrganizationId());
			m.put("1", LongWrapUtils.LongtoWrap(o.getCompanyName()));
			m.put("2", LongWrapUtils.LongtoWrap(o.getContactEmail()));
			m.put("3", o.getContactMobile());
			m.put("4", LongWrapUtils.LongtoWrap(o.getContactName()));
			m.put("5", LongWrapUtils.LongtoWrap(o.getTechContactEmail()));
			m.put("6", o.getStatus()==1 ? statusActive : statusInactive);
			m.put("7", showOuFromCurrentHierarchy(currentLoginHierarchyLevel, o.getOu()));
			m.put("8", organizationAliasDao.findByHierarchyLevel(o.getHierarchyLevel()).get(0).getAliasName());
			m.put("9", o.getHierarchyLevel());
			System.out.println("isAdmin: "+isAdmin);
			System.out.println("isReadOnly: "+isReadOnly);
			System.out.println("isManage: "+isManage);
			System.out.println("level1: "+o.getHierarchyLevel());
			System.out.println("level2: "+currentLoginHierarchyLevel);
			boolean isEditable = true;
			if(isAdmin.equals("true") && isReadOnly.equals("true") && isManage.equals("true")&& (o.getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("true") && isReadOnly.equals("false") && isManage.equals("false")&& (o.getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("true") && isReadOnly.equals("false") && isManage.equals("true")&& (o.getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("true") && isManage.equals("false")) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("false") && isManage.equals("true") && (o.getHierarchyLevel()-currentLoginHierarchyLevel>MANIPULATE_LAYER)) {
				isEditable = false;
			}else if(isAdmin.equals("false") && isReadOnly.equals("false") && isManage.equals("false")) {
				isEditable = false;
			}
			m.put("10", isEditable ?"<button class='fa fa-pencil btn btn-success editButton'></button>" : "<button class='fa fa-eye btn btn-success readonlyButton'></button>");
			m.put("DT_RowId", o.getOrganizationId());
			aaList.add(m);
		}
	
		resp.setAaData(aaList);
		log.debug("OrganizationServiceImpl | AjaxListResponse | exit");
		return resp;
	}
	
	
	@Transactional
	public void createOrganization(OrganizationDTO organizationDTO, String superiorOu,
			int heirarchyLevel/*, String aliasList*/) throws Exception{
			
		organizationDTO.setHierarchyLevel(heirarchyLevel);
		
		OrganizationDTO superior = null;
		if(StringUtils.isNotBlank(superiorOu)) {
			superior = organizationDao.findByOu(superiorOu).get(0);
		}
		
		organizationDTO.setDeleteFlag(ORGANIZATION_DELETE_FLAG_NORMAL);
		organizationDTO.setSuperior(superior);
		organizationDTO.setCreatedDate(new Date());
		organizationDTO.setLastUpdated(new Date());
		organizationDao.save(organizationDTO);
		
		/* === Set "ORGANIZATION_DEFAULT_ROLE" tie to Organization ==== */
		OrganizationRoleDTO administrator = new OrganizationRoleDTO();
		administrator.setOrganizationDTO(organizationDTO);
		administrator.setRoleDTO(roleDao.findOne((long)heirarchyLevel));
		OrganizationRoleDTO reportViewer = new OrganizationRoleDTO();
		if(heirarchyLevel==CLIENT || heirarchyLevel==DEPARTMENT) {
			reportViewer.setOrganizationDTO(organizationDTO);
			reportViewer.setRoleDTO(roleDao.findOne(REPORT_REVIEWER_ROLE));
		}
		/* === Set "ORGANIZATION_DEFAULT_ROLE" tie to Organization ==== */
		
		/* === Set up quota === */
		String quotaString = null;
		String assignedString = null;
		String [] temp = new String[LocalConstant.QUANTITY];
		log.debug("OrganizationServiceImpl | createOrganization() | LocalConstant.QUANTITY: "+LocalConstant.QUANTITY);
		
		for(int i=0;i<temp.length;i++ ){
			if(i==0) {
				quotaString = "0,";
				assignedString = "0,";
			}else if(i!=temp.length-1) {
				quotaString += "0,";
				assignedString += "0,";
			}else {
				quotaString += "0";
				assignedString += "0";
			}
			
	    }
		
		organizationDTO.setQuota(quotaString);
		organizationDTO.setAssigned(assignedString);
		log.debug("OrganizationServiceImpl | createOrganization() | quotaString: "+quotaString);
		log.debug("OrganizationServiceImpl | createOrganization() | assignedString: "+assignedString);
		/* === Set up quota === */
		
		organizationRoleDao.save(administrator);
		if(heirarchyLevel==CLIENT || heirarchyLevel==DEPARTMENT) {
			organizationRoleDao.save(reportViewer);
		}
		
		/*String[] splitAlias = aliasList.split(",");
		for(String alias_id : splitAlias) {
			OrganizationAliasDTO organizationAliasDTO = organizationAliasDao.findOne(Long.valueOf(alias_id));
			OrganizationOrganizationAliasDTO organizationOrganizationAliasDTO = new OrganizationOrganizationAliasDTO();
			organizationOrganizationAliasDTO.setOrganizationAliasDTO(organizationAliasDTO);
			organizationOrganizationAliasDTO.setOrganizationDTO(organizationDTO);
			organizationOrganizationAliasDao.save(organizationOrganizationAliasDTO);
		}*/
		
	}
	
	@Transactional
	public void editOrganization(OrganizationDTO organizationDTO/*,
			String aliasList*/) throws Exception{
		OrganizationDTO originalOrganizationDTO = organizationDao.findOne(organizationDTO.getOrganizationId());
		organizationDTO.setSuperior(originalOrganizationDTO.getSuperior());
		organizationDTO.setLastUpdated(new Date());
		organizationDao.save(organizationDTO);
		
	}

	
	@Transactional
	public OrganizationDTO getOrganzationByOu(String currentLoginOu) {
		log.debug("OrganizationServiceImpl | getOrganzationByOu()| entry" + currentLoginOu);
		List<OrganizationDTO> organizationList = organizationDao.findByDeleteFlagAndOu(ORGANIZATION_DELETE_FLAG_NORMAL, currentLoginOu);
		log.debug("OrganizationServiceImpl | getOrganzationByOu() | exit");
		return organizationList.get(0);
	}
	
	
	@Transactional
	public Map<String, String> getSubodinatesOuList(int loginHeirachyLevel, String loginOu, boolean isContainingSuperiorOu, boolean isView) {
		
		log.debug("OrganizationServiceImpl | getSubodinatesOuList | entry");
		
		Map<String, String> ouMap = new LinkedHashMap<String, String>();
		List<OrganizationDTO> organizationList = null;
		
		int fromLevel = loginHeirachyLevel+1;
		int toLevel = loginHeirachyLevel + (isView ? VIEW_LAYERS : MANIPULATE_LAYER);
		
		if(isRootAdminOU(loginOu)) {
			
			organizationList = organizationDao.findByDeleteFlagNotAndHierarchyLevelBetween(ORGANIZATION_DELETE_FLAG_DELETED, fromLevel, toLevel, new Sort(Sort.Direction.DESC, "organizationId"));
			
		}else {
			
			String ouSearchPattern = loginOu+".%";
			organizationList = organizationDao.findByDeleteFlagNotAndHierarchyLevelBetweenAndOuEndingWith(ORGANIZATION_DELETE_FLAG_DELETED, fromLevel, toLevel, ouSearchPattern, new Sort(Sort.Direction.DESC, "organizationId"));
			
		}
		
		System.out.println("Organization List Size: "+organizationList.size());
		if(organizationList.size()!=0) {
			for(int i = 0; i<organizationList.size() ; i++) {
				ouMap.put(organizationList.get(i).getOu(), showOuFromCurrentHierarchy(loginHeirachyLevel, organizationList.get(i).getOu()));
			}
		}
		
		if(isContainingSuperiorOu && (!isRootAdminOU(loginOu))) {
			ouMap.put(loginOu, showOuFromCurrentHierarchy(loginHeirachyLevel, loginOu));
		}
		
		log.debug("OrganizationServiceImpl | getSubodinatesOuList | exit");
		
		return ouMap;
		
	}

	private boolean isRootAdminOU(String loginOu) {
		return StringUtil.isBlank(loginOu);
	}
	
	@Transactional
	public Map<String, String> getSubodinatesOuListByHierarchyLevel(int hierachyLevel, String loginOu) {
		
		log.debug("OrganizationServiceImpl | getSubodinatesOuListByHierarchyLevel | entry");
		
		Map<String, String> ouList = new HashMap<String, String>();
		List<OrganizationDTO> organizationList = null;
		
		if(isRootAdminOU(loginOu)) {
			
			organizationList = organizationDao.findByDeleteFlagNotAndHierarchyLevel(ORGANIZATION_DELETE_FLAG_DELETED, hierachyLevel);
			
		}else if(PrincipalUtils.getHierarchyLevelByOu(loginOu)==hierachyLevel){
			
			organizationList = organizationDao.findByDeleteFlagNotAndOu(ORGANIZATION_DELETE_FLAG_DELETED, loginOu);
			
		}else {
			
			String ouSearchPattern = loginOu+".%";
			organizationList = organizationDao.findByDeleteFlagNotAndHierarchyLevelAndOuEndingWith(ORGANIZATION_DELETE_FLAG_DELETED, hierachyLevel, ouSearchPattern);
			
		}
		
		System.out.println("Organization List Size: "+organizationList.size());
		if(organizationList.size()!=0) {
			for(int i = organizationList.size()-1; i>=0 ; i--) {
				ouList.put(organizationList.get(i).getOu(), showOuFromCurrentHierarchy(PrincipalUtils.getHierarchyLevelByOu(loginOu), organizationList.get(i).getOu()));
			}
		}
		
		log.debug("OrganizationServiceImpl | getSubodinatesOuListByHierarchyLevel | exit");
		
		return ouList;
		
	}
	
	@Transactional
	public OrganizationDTO findByOrganizationId(Long organizationId) {
		
		log.debug("OrganizationServiceImpl | findOrganizationById | entry");
		
		OrganizationDTO result = organizationDao.findOne(organizationId);
		
		log.debug("OrganizationServiceImpl | findOrganizationById | exit");
		
		return result;
		
	}
	
	@Transactional
	public void changeOrganizationDeleteFlagByIdList(String idList, String dn, int deleteFlag) throws Exception{
		
		log.debug("OrganizationServiceImpl | changeOrganizationDeleteFlagByIdList() | entry");
		String[] splitId = null;
		int i = 0;
		try {
			splitId = idList.split(",");
			
			for (; i < splitId.length; i++) {
				
				/* Cascade-change status:
				 *  
				 * 1. This organization changes status to "Deleted"
				 * 2. Accounts under this organization, change status to "Deleted"
				 * 3. Subodinates-organizations under this organization change status to "Deleted"
				 * 4. Accounts under these Subodinates-organizations, change status to "Deleted"
				 * 5. Delete all captive portals belongs to this organization and 
				 *	  Subodinates-organizations
				 * 6. Call CP module API to delete all captive portals belongs to 
				 * 	  this organization and Subodinates-organizations in CP module
				 * 7. Quota management, Assigned Quota only sums quota of subodinates-organizations
				 * 	  status not equal "Deleted"
				 * 8. Quota management, return quota of deleted organization to its superior organizaiton 
				*/
				log.debug(dn+" try to set delete flag of organization which organizationId = " + splitId[i]);
				
				OrganizationDTO organizationDTO = organizationDao.findOne(Long.valueOf(splitId[i]));
				
				List<AccountDTO> organzationAccountList = accountDao.findByDeleteFlagNotAndOrganizationDTO_OrganizationId(deleteFlag, Long.valueOf(splitId[i]));
				//deleteAccountListFromLdap(dn, organzationAccountList);
				batchSetAccountDeleteFlagToDeleted(deleteFlag, organzationAccountList);
				List<AccountDTO> subOrganzationsAccountList = accountDao.findByDeleteFlagNotAndOrganizationDTO_OuLike(deleteFlag, organizationDTO.getOu()+".%");
				//deleteAccountListFromLdap(dn, subOrganzationsAccountList);
				batchSetAccountDeleteFlagToDeleted(deleteFlag, subOrganzationsAccountList);
				
				organizationDao.setDeleteFlagByOrganizationId(deleteFlag, Long.valueOf(splitId[i]));
				List<OrganizationDTO> organizationList = new ArrayList<OrganizationDTO>();
				organizationList.add(organizationDTO);
				batchSetOrganizationDeleteFlagToDeleted(deleteFlag, organizationList, dn);
				List<OrganizationDTO> subOrganizationList = organizationDao.findByDeleteFlagNotAndOuLike(deleteFlag, organizationDTO.getOu()+".%");
				batchSetOrganizationDeleteFlagToDeleted(deleteFlag, subOrganizationList, dn);
				
				returnQuotaToSuperior(organizationDTO);
				
				printLog(dn, deleteFlag, splitId[i], true);

			}
		} catch (Exception e) {
			printLog(dn, deleteFlag, splitId[i], false);
			throw e;
		}
		
		log.debug("OrganizationServiceImpl | changeOrganizationDeleteFlagByIdList() | exit");
		
	}

	private void returnQuotaToSuperior(OrganizationDTO organizationDTO) {
		String quotaString = organizationDTO.getQuota();
		String[] splitQuota = quotaString.split(",");
		String apQuota = splitQuota[0];
		
		OrganizationDTO superiorOrganization = organizationDTO.getSuperior();
		String superiorAssignedString = superiorOrganization.getAssigned();
		String[] splitSuperiorAssigned = superiorAssignedString.split(",");
		String superiorApAssigned = splitSuperiorAssigned[0];
		String superiorDeviceAssigned = splitSuperiorAssigned[1];
		
		Integer updatedSuperiorApAssigned = Integer.valueOf(superiorApAssigned) - Integer.valueOf(apQuota);
		superiorOrganization.setAssigned(updatedSuperiorApAssigned.toString()+","+superiorDeviceAssigned);
		organizationDao.save(superiorOrganization);
	}

	private void batchSetAccountDeleteFlagToDeleted(int deleteFlag,
			List<AccountDTO> accountList) {
		for(AccountDTO a : accountList) {
			a.setDeleteFlag(deleteFlag);
			a.setLastUpdated(new Date());
			accountDao.save(a);
		}
	}

	private void batchSetOrganizationDeleteFlagToDeleted(int deleteFlag,
			List<OrganizationDTO> organizationList, String dn) throws Exception{
		for(OrganizationDTO o : organizationList) {
			if(o.getHierarchyLevel()==CLIENT_HIERARCHY_LEVEL) {
				List<CaptivePortalDTO> captivePortalList = captivePortalDao.findByOrganizationDTO_OrganizationId(o.getOrganizationId());
				if(captivePortalList != null)
					batchDeleteCaptivePortal(dn, captivePortalList);
				List<CaptivePortalDTO> subOrganizationsCaptivePortalList = captivePortalDao.findByOrganizationDTO_DeleteFlagNotAndOrganizationDTO_OuLike(deleteFlag, o.getOu()+".%");
				if(subOrganizationsCaptivePortalList != null)
					batchDeleteCaptivePortal(dn, subOrganizationsCaptivePortalList);
				if(WILAS_LABEL.equals("standard")) {
					if(captivePortalList != null)
						batchDeletePiwik(dn, captivePortalList);
					if(subOrganizationsCaptivePortalList != null)
						batchDeletePiwik(dn, subOrganizationsCaptivePortalList);
				}
			}
			o.setDeleteFlag(deleteFlag);
			o.setLastUpdated(new Date());
			organizationDao.save(o);
		}
	}

	private void batchDeletePiwik(String dn,
			List<CaptivePortalDTO> captivePortalList) throws Exception {
		for(CaptivePortalDTO cp : captivePortalList) {
			PiwikSiteDTO piwikSiteDTO = piwikSiteDao.findByCpId(cp.getCpId());
			if(piwikSiteDTO != null) {
				log.debug(dn +" is trying to delete a piwik which site_name = " + piwikSiteDTO.getSiteName());
				deleteSinglePiwikFromLocalDBAndCpModuleAndPiwikSite(dn, piwikSiteDTO.getSiteId().toString(), piwikSiteDTO.getPiwikSiteId().toString());
			}
		}
	}

	private void batchDeleteCaptivePortal(String dn,
			List<CaptivePortalDTO> captivePortalList) throws Exception {
		for(CaptivePortalDTO cp : captivePortalList) {
			deleteSingleCaptivePortalFromLocalDBAndCpModule(dn, cp.getCpId(), cp.getCpSpecialCode());
		}
	}

	private void printLog(String dn, int deleteFlag, String splitId, boolean isSuccess) {
		switch(deleteFlag){
		case ORGANIZATION_DELETE_FLAG_NORMAL :
			log.info("|changeOrganizationDeleteFlagByIdList()|"+dn+"|organizationId = "+splitId + "|delete flag set to normal "+ (isSuccess ? "successfully" : "failed")+".");
		   break;
		case ORGANIZATION_DELETE_FLAG_DELETED :
			log.info("|changeOrganizationDeleteFlagByIdList()|"+dn+"|organizationId = "+splitId + "|delete flag set to deleted "+ (isSuccess ? "successfully" : "failed")+".");
		   break;
		}
	}
	
	@Transactional
	public String getAliasIdStringByOrganizationId(Long id) {
		String aliasIdList = "";
		List<OrganizationOrganizationAliasDTO> organizationOrganizationAliasList = organizationOrganizationAliasDao.findByOrganizationDTO_OrganizationId(id);
		if(organizationOrganizationAliasList!=null) {
			for(int i=0; i<organizationOrganizationAliasList.size(); i++ ) {
				if(i==0) {
					aliasIdList += organizationOrganizationAliasList.get(i).getOrganizationAliasDTO().getAliasId().toString();
				}else {
					aliasIdList += ","+organizationOrganizationAliasList.get(i).getOrganizationAliasDTO().getAliasId().toString();
				}
			}
		}
		return aliasIdList;
	}
	
	@Transactional
	public boolean checkUniqueOranizationByOu(String ou) {
		
		boolean isUniqueOrganization = true;
		List<OrganizationDTO> organizationList = organizationDao.findByOu(ou);
		if(organizationList.size()!=0) {
			isUniqueOrganization = false;
		}
		return isUniqueOrganization;
	}
	
	@Transactional
	public boolean checkUniqueOrganizationNameExcludeOrganizationNameIsBeingEditing(
			Long organizationId, String organizationName) {
		boolean isUniqueOrganizationName = true;
		List<Long> organizationIdList = new ArrayList<Long>();
		organizationIdList.add(organizationId);
		List<OrganizationDTO> organizationList = organizationDao.findByOrganizationNameAndOrganizationIdNotIn(organizationName, organizationIdList);
		if(organizationList.size()!=0) {
			isUniqueOrganizationName = false;
		}
		return isUniqueOrganizationName;
	}
	
	@Transactional
	public Integer getHierarchyLevelByOu(String ou) {
		
		log.debug("OrganizationServiceImpl | getHierarchyLevelByOu() | entry");
		
		Integer hierarchyLevel = null;
		List<OrganizationDTO> organizationList = organizationDao.findByDeleteFlagAndOu(ORGANIZATION_DELETE_FLAG_NORMAL, ou);
		if(organizationList!=null && organizationList.size()!=0) {
			hierarchyLevel = organizationList.get(0).getHierarchyLevel();
		}
		
		log.debug("OrganizationServiceImpl | getHierarchyLevelByOu() | exit");
		return hierarchyLevel;
	}
	
	@Transactional
	public OrganizationDTO findOne(Long organizationId) {
		
		return organizationDao.findOne(organizationId);
		
	}
	
	@Transactional
	public List<Map<String, Object>> getClientMapListByResellerIdAndLoginOu(
			String reseller_id,
			String login_ou) {
		List<OrganizationDTO> organizationList;
		
		if(isRootAdminOU(reseller_id) || reseller_id.equals(SELECT_ALL_OPTIONS)) {
			organizationList = organizationDao.findByDeleteFlagNotAndSuperior_Superior_Ou(ORGANIZATION_DELETE_FLAG_DELETED, login_ou);
		}else {
			organizationList = organizationDao.findByDeleteFlagAndSuperior_OrganizationId(ORGANIZATION_DELETE_FLAG_NORMAL, Long.valueOf(reseller_id));
		}
		
		List<Map<String, Object>> resultList = new LinkedList<Map<String, Object>>();
		for (OrganizationDTO o : organizationList) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", o.getOrganizationId().toString());
			map.put("name", o.getOrganizationName().toString());
			
			resultList.add(map);
			
		}
		return resultList;
	}
	
	@Transactional
	public void initiateCaptivePortal(String ou) throws Exception{
		
		String initCPUrl = WILAS_CP_INIT_CP_URL+SPRING_EXT;      // (cp/api/initCP) Please config url in config file
		log.debug("OrganizationServiceImpl | initialteCaptivePortal() | POST | initCPUrl: " + initCPUrl);
		
		MultivaluedMap<String, String> formData = new MultivaluedMapImpl();
		formData.add("ou", ou);
		
		String result = (String) httpBackendPost(initCPUrl, formData, new EasyClient().getClient(), MediaType.APPLICATION_FORM_URLENCODED, String.class);
		log.debug("OrganizationServiceImpl | initialteCaptivePortal() | POST | result: "+ result);
		log.debug("OrganizationServiceImpl | initialteCaptivePortal() | POST | exit");
	}
	
}
