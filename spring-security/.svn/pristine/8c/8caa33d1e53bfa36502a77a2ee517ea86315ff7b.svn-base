package com.techstudio.service.am;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.techstudio.common.StatusCode;
import com.techstudio.dao.am.AccountDao;
import com.techstudio.dao.am.FunctionDao;
import com.techstudio.dao.am.RoleDao;
import com.techstudio.dao.am.RoleFunctionDao;
import com.techstudio.model.am.AccountDTO;
import com.techstudio.model.am.FunctionDTO;
import com.techstudio.model.am.RoleDTO;
import com.techstudio.model.am.RoleFunctionDTO;

@Service
public class RoleFunctionServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(RoleFunctionServiceImpl.class);
	
	@Autowired
	private RoleFunctionDao roleFunctionDao;
	
	@Autowired
	private FunctionDao functionDao;
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private AccountDao accountDao;
	
	
	@Transactional
	public void createRoleFunctionRelationship(String assign_function_ids_list,
			Long roleId) throws Exception{
		
		log.debug("RoleFunctionServiceImpl | createRoleFunctionRelationship | entry");
		String[] splitId = null;
		splitId = assign_function_ids_list.split(",");
		RoleDTO roleDTO = roleDao.findOne(roleId);
		
		FunctionDTO predefineFunctionDTO = functionDao.findByFunctionName("WS_LOGIN");
		RoleFunctionDTO predefineRoleFunctionDTO = new RoleFunctionDTO();
		predefineRoleFunctionDTO.setFunctionDTO(predefineFunctionDTO);
		predefineRoleFunctionDTO.setRoleDTO(roleDTO);
		roleFunctionDao.save(predefineRoleFunctionDTO);
		
		for (int i=0; i<splitId.length; i++) {
			
			FunctionDTO functionDTO = functionDao.findOne(Integer.valueOf(splitId[i]));
			RoleFunctionDTO roleFunctionDTO = new RoleFunctionDTO();
			/* add relationship between RoleDTO and FunctionDTO */
			roleFunctionDTO.setFunctionDTO(functionDTO);
			roleFunctionDTO.setRoleDTO(roleDTO);
			log.debug("RoleFunctionServiceImpl | role_name: "+roleDTO.getName()+" | function_name: "+functionDTO.getFunctionName());
			roleFunctionDao.save(roleFunctionDTO);
			log.debug("RoleFunctionServiceImpl | Inserted into am_role_function(Database).");
			
		}
		log.debug("RoleFunctionServiceImpl | createRoleFunctionRelationship | exit");
		
	}

	@Transactional
	public void removeRoleFunctionRelationshipByRoleId(Long roleId) throws Exception {
		
		log.debug("RoleFunctionServiceImpl | removeRoleFunctionRelationshipByRoleId | entry");
		
		roleFunctionDao.deleteByRoleDTO_RoleId(roleId);
		
		log.debug("RoleFunctionServiceImpl | removeRoleFunctionRelationshipByRoleId | exit");
		
	}	
	
	@Transactional
	public List<Map<String, Object>> getAssignedFunctionsInRoleByRoleId(
			Long roleId) throws Exception {
		List<RoleFunctionDTO> roleFunctionList = roleFunctionDao.findByRoleDTO_RoleId(roleId);
		List<Map<String, Object>> resultList = new LinkedList<Map<String, Object>>();
		for (RoleFunctionDTO roleFunctionDTO : roleFunctionList) {
			
			if(!roleFunctionDTO.getFunctionDTO().getFunctionName().equals("WS_LOGIN")) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("function_id", roleFunctionDTO.getFunctionDTO().getFunctionId());
				map.put("function_name", roleFunctionDTO.getFunctionDTO().getFunctionName());
				
				resultList.add(map);
			}
			
		}
		return resultList;
	}
	

	
}
