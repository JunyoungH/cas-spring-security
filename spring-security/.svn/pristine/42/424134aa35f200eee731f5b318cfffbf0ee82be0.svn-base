package com.techstudio.service.am;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.techstudio.dao.am.HierarchyFunctionDao;
import com.techstudio.dao.am.RoleFunctionDao;
import com.techstudio.model.am.HierarchyFunctionDTO;
import com.techstudio.model.am.RoleFunctionDTO;

@Service
public class HierarchyFunctionServiceImpl extends BaseService{
	
	private static final Logger log = Logger.getLogger(HierarchyFunctionServiceImpl.class);
	
	@Autowired
	private HierarchyFunctionDao hierarchyFunctionDao;
	
	@Autowired
	private RoleFunctionDao roleFunctionDao;
	
	@Transactional
	public List<Map<String, Object>> getHierarchyAvailabaleFunctionsByHierarchyLevel(
			Integer hierarchyLevel) throws Exception{
		
		log.debug("HierarchyFunctionServiceImpl | getHierarchyAvailabaleFunctionsByHierarchyLevel() | entry");
		
		List<HierarchyFunctionDTO> hierarchyFunctionList = hierarchyFunctionDao.findByOrganizationAliasDTO_HierarchyLevel(hierarchyLevel);
		List<Map<String, Object>> resultList = new LinkedList<Map<String, Object>>();
		for (HierarchyFunctionDTO hierarchyFunctionDTO : hierarchyFunctionList) {
			
			if(!hierarchyFunctionDTO.getFunctionDTO().getFunctionName().equals("WS_LOGIN") ) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("function_id", hierarchyFunctionDTO.getFunctionDTO().getFunctionId());
				map.put("function_name", hierarchyFunctionDTO.getFunctionDTO().getFunctionName());
				resultList.add(map);
			}
			
		}
		
		log.debug("HierarchyFunctionServiceImpl | getHierarchyAvailabaleFunctionsByHierarchyLevel() | exit");
		return resultList;
	}
	
	@Transactional
	public List<Map<String, Object>> getAssignableFunctionsByRoleIdAndHierarchyLevel(
			Long role_id, Integer hierarchyLevel) throws Exception {
		List<HierarchyFunctionDTO> assignablefunctionList = hierarchyFunctionDao.findByOrganizationAliasDTO_HierarchyLevel(hierarchyLevel);
		List<RoleFunctionDTO> assignedfunctionList = roleFunctionDao.findByRoleDTO_RoleId(role_id);
		
		for(RoleFunctionDTO roleFunctionDTO : assignedfunctionList) {
			log.debug("HierarchyFunctionServiceImpl | role/get_assignable_functions | POST | AssignedfunctionList: "+ roleFunctionDTO.getFunctionDTO().getFunctionName());
		}
		
		for(RoleFunctionDTO roleFunctionDTO : assignedfunctionList) {
			for(HierarchyFunctionDTO hierarchyFunctionDTO : assignablefunctionList) {
				if(hierarchyFunctionDTO.getFunctionDTO().getFunctionId()==roleFunctionDTO.getFunctionDTO().getFunctionId()) {
					assignablefunctionList.remove(hierarchyFunctionDTO);
					break;
				}
			}
		}
		
		List<Map<String, Object>> assignableFunctionsList = new LinkedList<Map<String, Object>>();
		for (HierarchyFunctionDTO hierarchyFunctionDTO : assignablefunctionList) {
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("function_id", hierarchyFunctionDTO.getFunctionDTO().getFunctionId());
			map.put("function_name", hierarchyFunctionDTO.getFunctionDTO().getFunctionName());
			
			assignableFunctionsList.add(map);
			
		}
		
		return assignableFunctionsList;
		
	}
	
	
}
